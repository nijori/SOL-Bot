import { jest, describe, test, it, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';

import fs from 'fs';
import path from 'path';
import {
  parseTodoFile,
  getAllTasks,
  checkDuplicateTaskIds,
  checkProgressHealthConsistency,
  checkPastDueDates,
  checkDependsOnReferences,
  checkRequiredFields,
  checkTaskIdFormat,
  checkProgressFormat,
  checkHealthStatus,
  validateTodoFiles,
  TodoTask,
  ValidationErrorType
} from '../../utils/todoValidator';

// ÊúÄÂàù„Å´Ëá™Âãï„É¢„ÉÉ„ÇØ„Çí„É™„Çª„ÉÉ„Éà„Åó„Å¶„ÄÅÂÆüÈöõ„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÅÆÂãï‰Ωú„ÇíÁ∂≠ÊåÅ
jest.unmock('../../utils/todoValidator');

// fs„É¢„Ç∏„É•„Éº„É´„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('fs', () => ({
  readFileSync: jest.fn(),
  readdirSync: jest.fn(),
  existsSync: jest.fn().mockReturnValue(true)
}));

// „É≠„Ç¨„Éº„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('../../utils/logger', () => ({
  error: jest.fn(),
  warn: jest.fn(),
  info: jest.fn(),
  debug: jest.fn()
}));

// globalÂûãÊã°Âºµ
declare global {
  namespace NodeJS {
    interface Global {
      parseTodoFile: any;
      getAllTasks: any;
      __RESOURCE_TRACKER: any;
    }
  }
}

describe('TodoValidator', () => {
  // „ÉÜ„Çπ„ÉàÂâç„Å´ÊØéÂõû„É¢„ÉÉ„ÇØ„Çí„É™„Çª„ÉÉ„Éà
  beforeEach(() => {
    jest.clearAllMocks();
    (fs.existsSync as jest.Mock).mockReturnValue(true);
  });

  // ÂêÑ„ÉÜ„Çπ„ÉàÂæå„Å´„É™„ÇΩ„Éº„ÇπËß£Êîæ
  afterEach(async () => {
    jest.clearAllMocks();
    jest.resetAllMocks();
    
    // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÊòéÁ§∫ÁöÑ„Å´ÂâäÈô§
    process.removeAllListeners('unhandledRejection');
    process.removeAllListeners('uncaughtException');
    
    // „Ç∞„É≠„Éº„Éê„É´„É™„ÇΩ„Éº„Çπ„Éà„É©„ÉÉ„Ç´„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
    if (global.__RESOURCE_TRACKER) {
      await global.__RESOURCE_TRACKER.cleanup();
    }
    
    // Êú™Ëß£Ê±∫„ÅÆ„Éó„É≠„Éü„Çπ„Åå„ÅÇ„Çå„Å∞ÂÆå‰∫Ü„Åï„Åõ„Çã„Åü„ÇÅ„Å´Â∞ë„ÅóÂæÖÊ©ü
    await new Promise(resolve => setTimeout(resolve, 100));
  });

  // „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÂæå„Å´ÊúÄÁµÇ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
  afterAll(async () => {
    // „Ç∞„É≠„Éº„Éê„É´„É™„ÇΩ„Éº„Çπ„Éà„É©„ÉÉ„Ç´„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÊúÄÁµÇ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
    if (global.__RESOURCE_TRACKER) {
      await global.__RESOURCE_TRACKER.cleanup(true);
    }
    
    // ÈùûÂêåÊúüÂá¶ÁêÜ„ÅÆÂÆåÂÖ®„Å™„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂæÖÊ©ü
    await new Promise(resolve => setTimeout(resolve, 500));
  });

  describe('parseTodoFile', () => {
    it('Ê≠£„Åó„ÅèÂΩ¢Âºè„ÅÆ„Çø„Çπ„ÇØ„Çí„Éë„Éº„Çπ„Åß„Åç„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø
      const mockFileContent = `
# „ÉÜ„Çπ„ÉàTodo„Éï„Ç°„Ç§„É´

## „Çø„Çπ„ÇØ„Çª„ÇØ„Ç∑„Éß„É≥

- [ ] TST-001: „ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ1
      - üìÖ Due        : 2026-02-15
      - üë§ Owner      : @nijor
      - üîó Depends-on : TST-002, TST-003
      - üè∑Ô∏è  Label      : test
      - ü©∫ Health     : ‚è≥
      - üìä Progress   : 25%
      - ‚úé Notes      : „Åì„Çå„ÅØ„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ„Åß„Åô

- [x] TST-002: ÂÆå‰∫Ü„Åó„Åü„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ
      - üìÖ Due        : 2026-02-10
      - üë§ Owner      : @nijor
      - üè∑Ô∏è  Label      : test
      - ü©∫ Health     : ‚úÖ
      - üìä Progress   : 100%
      - ‚úé Notes      : ÂÆå‰∫Ü„Åó„Åü„Çø„Çπ„ÇØ
`;

      // „É¢„ÉÉ„ÇØ„ÅÆÂãï‰ΩúË®≠ÂÆö
      (fs.readFileSync as jest.Mock).mockReturnValue(mockFileContent);

      // Èñ¢Êï∞ÂÆüË°å
      const tasks = parseTodoFile('dummy/path.mdc');

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(tasks).toHaveLength(2);
      expect(tasks[0]).toMatchObject({
        id: 'TST-001',
        title: '„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ1',
        dueDate: '2026-02-15',
        owner: '@nijor',
        dependsOn: ['TST-002', 'TST-003'],
        label: 'test',
        health: '‚è≥',
        progress: '25%',
        notes: '„Åì„Çå„ÅØ„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ„Åß„Åô',
        isCompleted: false
      });

      expect(tasks[1]).toMatchObject({
        id: 'TST-002',
        title: 'ÂÆå‰∫Ü„Åó„Åü„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ',
        dueDate: '2026-02-10',
        owner: '@nijor',
        label: 'test',
        health: '‚úÖ',
        progress: '100%',
        notes: 'ÂÆå‰∫Ü„Åó„Åü„Çø„Çπ„ÇØ',
        isCompleted: true
      });
    });

    it('„Ç®„É©„ÉºÊôÇ„Å´Á©∫ÈÖçÂàó„ÇíËøî„Åô', () => {
      // „Ç®„É©„Éº„ÇíÊäï„Åí„Çã„É¢„ÉÉ„ÇØË®≠ÂÆö
      (fs.readFileSync as jest.Mock).mockImplementation(() => {
        throw new Error('Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº');
      });

      // Èñ¢Êï∞ÂÆüË°å
      const tasks = parseTodoFile('dummy/path.mdc');

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(tasks).toEqual([]);
    });
  });

  describe('getAllTasks', () => {
    it('Ê≠£„Åó„ÅèÂëº„Å≥Âá∫„Åõ„Çã„Åì„Å®', () => {
      // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø
      const mockFiles = ['sprint.mdc'];
      (fs.readdirSync as jest.Mock).mockReturnValue(mockFiles);

      // ÂçòÁ¥î„Å™mockFileContent
      const mockFileContent =
        '- [ ] TST-001: „ÉÜ„Çπ„Éà\n      - üìÖ Due: 2026-01-01\n      - üë§ Owner: @test';
      (fs.readFileSync as jest.Mock).mockReturnValue(mockFileContent);

      // Èñ¢Êï∞ÂÆüË°å - ÂÆüÈöõ„ÅÆ„Éë„Éº„Çπ„É≠„Ç∏„ÉÉ„ÇØ„Çí‰Ωø„ÅÜ
      const tasks = getAllTasks('/dummy/dir');

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥ - Â∞ë„Å™„Åè„Å®„ÇÇÂëº„Å≥Âá∫„Åó„ÅåÊàêÂäü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(Array.isArray(tasks)).toBe(true);
    });
  });

  describe('checkDuplicateTaskIds', () => {
    it('ÈáçË§á„Åó„Åü„Çø„Çπ„ÇØID„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({ id: 'TST-001', filePath: 'sprint.mdc', lineNumber: 10 }),
        createMockTask({ id: 'TST-002', filePath: 'sprint.mdc', lineNumber: 20 }),
        createMockTask({ id: 'TST-001', filePath: 'backlog.mdc', lineNumber: 5 }),
        createMockTask({ id: 'TST-003', filePath: 'sprint.mdc', lineNumber: 30 })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkDuplicateTaskIds(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(1);
      expect(errors[0].type).toBe(ValidationErrorType.DUPLICATE_TASK_ID);
      expect(errors[0].taskId).toBe('TST-001');
    });

    it('ÈáçË§á„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÁ©∫ÈÖçÂàó„ÇíËøî„Åô', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({ id: 'TST-001', filePath: 'sprint.mdc', lineNumber: 10 }),
        createMockTask({ id: 'TST-002', filePath: 'sprint.mdc', lineNumber: 20 }),
        createMockTask({ id: 'TST-003', filePath: 'sprint.mdc', lineNumber: 30 })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkDuplicateTaskIds(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(0);
    });
  });

  describe('checkProgressHealthConsistency', () => {
    it('ÂÆå‰∫Ü„Éû„Éº„ÇØ„Åï„Çå„Åü„Çø„Çπ„ÇØ„ÅÆHealth„Å®ÈÄ≤ÊçóÁéá„ÅÆ‰∏çÊï¥Âêà„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({
          id: 'TST-001',
          isCompleted: true,
          health: '‚è≥',
          progress: '75%',
          filePath: 'sprint.mdc',
          lineNumber: 10
        }),
        createMockTask({
          id: 'TST-002',
          isCompleted: true,
          health: '‚úÖ',
          progress: '50%',
          filePath: 'sprint.mdc',
          lineNumber: 20
        }),
        createMockTask({
          id: 'TST-003',
          isCompleted: true,
          health: '‚úÖ',
          progress: '100%',
          filePath: 'sprint.mdc',
          lineNumber: 30
        })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkProgressHealthConsistency(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(3);
      expect(errors[0].taskId).toBe('TST-001');
      expect(errors[0].type).toBe(ValidationErrorType.INCONSISTENT_PROGRESS_HEALTH);
      expect(errors[1].taskId).toBe('TST-001');
      expect(errors[2].taskId).toBe('TST-002');
    });

    it('Êú™ÂÆå‰∫Ü„Çø„Çπ„ÇØ„ÅÆHealth„Å®ÈÄ≤ÊçóÁéá„ÅÆ‰∏çÊï¥Âêà„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({
          id: 'TST-001',
          isCompleted: false,
          health: '‚úÖ',
          progress: '75%',
          filePath: 'sprint.mdc',
          lineNumber: 10
        }),
        createMockTask({
          id: 'TST-002',
          isCompleted: false,
          health: '‚è≥',
          progress: '100%',
          filePath: 'sprint.mdc',
          lineNumber: 20
        }),
        createMockTask({
          id: 'TST-003',
          isCompleted: false,
          health: '‚è≥',
          progress: '50%',
          filePath: 'sprint.mdc',
          lineNumber: 30
        })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkProgressHealthConsistency(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(2);
      expect(errors[0].taskId).toBe('TST-001');
      expect(errors[1].taskId).toBe('TST-002');
    });
  });

  describe('checkPastDueDates', () => {
    it('ÊúüÈôêÂàá„Çå„ÅÆ„Çø„Çπ„ÇØ„ÇíÊ§úÂá∫„Åô„Çã', () => {
      const now = new Date();
      const yesterdayDate = new Date(now);
      yesterdayDate.setDate(now.getDate() - 1);
      const yesterday = yesterdayDate.toISOString().split('T')[0]; // YYYY-MM-DDÂΩ¢Âºè

      const tomorrowDate = new Date(now);
      tomorrowDate.setDate(now.getDate() + 1);
      const tomorrow = tomorrowDate.toISOString().split('T')[0]; // YYYY-MM-DDÂΩ¢Âºè

      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({
          id: 'TST-001',
          isCompleted: false,
          dueDate: yesterday,
          filePath: 'sprint.mdc',
          lineNumber: 10
        }),
        createMockTask({
          id: 'TST-002',
          isCompleted: false,
          dueDate: tomorrow,
          filePath: 'sprint.mdc',
          lineNumber: 20
        }),
        createMockTask({
          id: 'TST-003',
          isCompleted: true,
          dueDate: yesterday,
          filePath: 'sprint.mdc',
          lineNumber: 30
        })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkPastDueDates(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(1);
      expect(errors[0].taskId).toBe('TST-001');
      expect(errors[0].type).toBe(ValidationErrorType.PAST_DUE_DATE);
    });

    it('ÁÑ°Âäπ„Å™Êó•‰ªòÂΩ¢Âºè„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({
          id: 'TST-001',
          isCompleted: false,
          dueDate: '2026/02/15',
          filePath: 'sprint.mdc',
          lineNumber: 10
        })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkPastDueDates(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(1);
      expect(errors[0].type).toBe(ValidationErrorType.INVALID_DATE_FORMAT);
    });
  });

  describe('checkDependsOnReferences', () => {
    it('Â≠òÂú®„Åó„Å™„ÅÑ„Çø„Çπ„ÇØID„Å∏„ÅÆ‰æùÂ≠ò„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({
          id: 'TST-001',
          dependsOn: ['TST-002', 'TST-999'],
          filePath: 'sprint.mdc',
          lineNumber: 10
        }),
        createMockTask({ id: 'TST-002', dependsOn: [], filePath: 'sprint.mdc', lineNumber: 20 })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkDependsOnReferences(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(1);
      expect(errors[0].taskId).toBe('TST-001');
      expect(errors[0].type).toBe(ValidationErrorType.INVALID_DEPENDS_ON);
      expect(errors[0].message).toContain('TST-999');
    });
  });

  describe('checkRequiredFields', () => {
    it('ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÅÆÊ¨†ËêΩ„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({
          id: 'TST-001',
          dueDate: '2026-02-15',
          owner: null, // Ê¨†ËêΩ
          label: 'test',
          health: '‚è≥',
          progress: '25%',
          filePath: 'sprint.mdc',
          lineNumber: 10
        }),
        createMockTask({
          id: 'TST-002',
          dueDate: null, // Ê¨†ËêΩ
          owner: '@nijor',
          label: null, // Ê¨†ËêΩ
          health: '‚ö†Ô∏è',
          progress: '50%',
          filePath: 'sprint.mdc',
          lineNumber: 20
        })
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkRequiredFields(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(3);
      expect(errors[0].taskId).toBe('TST-001');
      expect(errors[0].type).toBe(ValidationErrorType.MISSING_REQUIRED_FIELD);
      expect(errors[0].message).toContain('owner');

      expect(errors[1].taskId).toBe('TST-002');
      expect(errors[1].message).toContain('dueDate');

      expect(errors[2].taskId).toBe('TST-002');
      expect(errors[2].message).toContain('label');
    });
  });

  describe('checkTaskIdFormat', () => {
    it('ÁÑ°Âäπ„Å™„Çø„Çπ„ÇØIDÂΩ¢Âºè„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({ id: 'TST-001', filePath: 'sprint.mdc', lineNumber: 10 }), // Ê≠£„Åó„ÅÑ
        createMockTask({ id: 'tst-002', filePath: 'sprint.mdc', lineNumber: 20 }), // Â∞èÊñáÂ≠ó
        createMockTask({ id: 'TST-01', filePath: 'sprint.mdc', lineNumber: 30 }), // Ê°Å‰∏çË∂≥
        createMockTask({ id: 'TST001', filePath: 'sprint.mdc', lineNumber: 40 }) // „Éè„Ç§„Éï„É≥„Å™„Åó
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkTaskIdFormat(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(3);
      expect(errors.map((e) => e.taskId)).toEqual(['tst-002', 'TST-01', 'TST001']);
      expect(errors.every((e) => e.type === ValidationErrorType.INVALID_TASK_ID_FORMAT)).toBe(true);
    });
  });

  describe('checkProgressFormat', () => {
    it('ÁÑ°Âäπ„Å™ÈÄ≤ÊçóÁéáÂΩ¢Âºè„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({ id: 'TST-001', progress: '0%', filePath: 'sprint.mdc', lineNumber: 10 }), // Ê≠£„Åó„ÅÑ
        createMockTask({ id: 'TST-002', progress: '50%', filePath: 'sprint.mdc', lineNumber: 20 }), // Ê≠£„Åó„ÅÑ
        createMockTask({ id: 'TST-003', progress: '33%', filePath: 'sprint.mdc', lineNumber: 30 }), // Ê≠£„Åó„ÅÑ (ÊüîËªü„Éï„Ç©„Éº„Éû„ÉÉ„Éà)
        createMockTask({ id: 'TST-004', progress: '10%', filePath: 'sprint.mdc', lineNumber: 40 }), // Ê≠£„Åó„ÅÑ (ÊüîËªü„Éï„Ç©„Éº„Éû„ÉÉ„Éà)
        createMockTask({ id: 'TST-005', progress: '200%', filePath: 'sprint.mdc', lineNumber: 50 }), // ÁÑ°Âäπ
        createMockTask({ id: 'TST-006', progress: '-10%', filePath: 'sprint.mdc', lineNumber: 60 }), // ÁÑ°Âäπ
        createMockTask({ id: 'TST-007', progress: '50', filePath: 'sprint.mdc', lineNumber: 70 }) // ÁÑ°Âäπ (%„Å™„Åó)
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkProgressFormat(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(3);
      expect(errors.map((e) => e.taskId)).toEqual(['TST-005', 'TST-006', 'TST-007']);
      expect(errors.every((e) => e.type === ValidationErrorType.INVALID_PROGRESS_FORMAT)).toBe(
        true
      );
    });
  });

  describe('checkHealthStatus', () => {
    it('ÁÑ°Âäπ„Å™HealthÁä∂ÊÖã„ÇíÊ§úÂá∫„Åô„Çã', () => {
      // „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ
      const tasks: TodoTask[] = [
        createMockTask({ id: 'TST-001', health: '‚è≥', filePath: 'sprint.mdc', lineNumber: 10 }), // Ê≠£„Åó„ÅÑ
        createMockTask({ id: 'TST-002', health: '‚úÖ', filePath: 'sprint.mdc', lineNumber: 20 }), // Ê≠£„Åó„ÅÑ
        createMockTask({ id: 'TST-003', health: 'üîÑ', filePath: 'sprint.mdc', lineNumber: 30 }), // ÁÑ°Âäπ
        createMockTask({ id: 'TST-004', health: 'WIP', filePath: 'sprint.mdc', lineNumber: 40 }) // ÁÑ°Âäπ
      ];

      // Èñ¢Êï∞ÂÆüË°å
      const errors = checkHealthStatus(tasks);

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥
      expect(errors).toHaveLength(2);
      expect(errors.map((e) => e.taskId)).toEqual(['TST-003', 'TST-004']);
      expect(errors.every((e) => e.type === ValidationErrorType.INVALID_HEALTH_STATUS)).toBe(true);
    });
  });

  describe('validateTodoFiles', () => {
    it('Â∞ë„Å™„Åè„Å®„ÇÇÂÆüË°å„ÅåÊàêÂäü„Åô„Çã„Åì„Å®', () => {
      // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø
      const mockFiles = ['sprint.mdc'];
      (fs.readdirSync as jest.Mock).mockReturnValue(mockFiles);
      (fs.existsSync as jest.Mock).mockReturnValue(true);

      // ÂçòÁ¥î„Å™mockFileContent („Ç®„É©„Éº„ÇíÂê´„ÇÄ)
      const mockFileContent =
        '- [x] TST-001: „ÉÜ„Çπ„Éà\n      - üìÖ Due: 2026-01-01\n      - üë§ Owner: @test\n      - ü©∫ Health: ‚è≥\n      - üìä Progress: 50%';
      (fs.readFileSync as jest.Mock).mockReturnValue(mockFileContent);

      // Èñ¢Êï∞ÂÆüË°å
      const errors = validateTodoFiles('/dummy/dir');

      // „Ç¢„Çµ„Éº„Ç∑„Éß„É≥ - Â∞ë„Å™„Åè„Å®„ÇÇÂëº„Å≥Âá∫„Åó„ÅåÊàêÂäü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      expect(Array.isArray(errors)).toBe(true);
    });
  });

  // „Éò„É´„Éë„ÉºÈñ¢Êï∞: „É¢„ÉÉ„ÇØ„Çø„Çπ„ÇØ„ÅÆ‰ΩúÊàê
  function createMockTask(overrides: Partial<TodoTask>): TodoTask {
    return {
      id: 'DEFAULT-001',
      title: 'Default Task',
      dueDate: '2026-01-01',
      owner: '@default',
      dependsOn: [],
      label: 'test',
      health: '‚è≥',
      progress: '0%',
      notes: 'Default notes',
      isCompleted: false,
      rawText: '',
      filePath: 'default.mdc',
      lineNumber: 1,
      ...overrides
    };
  }
});
