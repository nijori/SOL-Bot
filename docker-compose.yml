version: '3.8'

services:
  # 開発環境用サービス
  solbot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: solbot-dev
    volumes:
      # ソースコードをボリュームマウントして、コード変更を即時反映
      - ./src:/app/src
      - ./data:/app/data
      - ./logs:/app/logs
      # node_modulesはnamed volumeとして定義
      - node_modules:/app/node_modules
      # ログローテーション設定
      - logrotateconfig:/etc/logrotate.d
    environment:
      - NODE_ENV=development
      - TZ=UTC
    ports:
      - '3000:3000'
    restart: unless-stopped
    # ヘルスチェックを追加
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/status']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # ログ設定を追加
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
        tag: '{{.Name}}/{{.ID}}'

  # 本番環境用サービス
  solbot-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: solbot-prod
    volumes:
      # データと設定、ログのみをボリュームマウント
      - ./data:/app/data
      - ./logs:/app/logs
      # ログローテーション設定
      - logrotateconfig:/etc/logrotate.d
    environment:
      - NODE_ENV=production
      - TZ=UTC
    ports:
      - '3000:3000'
    restart: always
    # ヘルスチェックを追加
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/status']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    # ログ設定を追加
    logging:
      driver: 'json-file'
      options:
        max-size: '20m'
        max-file: '5'
        tag: '{{.Name}}/{{.ID}}'

  # S3へのログ転送サービス
  local-to-s3:
    image: amazon/aws-cli:latest
    container_name: log-to-s3
    volumes:
      - ./logs:/logs-to-sync
      - ~/.aws:/root/.aws:ro
    environment:
      - AWS_REGION=${AWS_REGION:-ap-northeast-1}
      - S3_BUCKET=${LOG_S3_BUCKET:-solbot-logs}
      - LOG_RETENTION_DAYS=90
    command: >
      sh -c "while true; do
        aws s3 sync /logs-to-sync s3://$$S3_BUCKET/logs/$(date +%Y/%m/%d) --exclude '*' --include '*.log' --include '*.json';
        echo 'Logs synced to S3 bucket $$S3_BUCKET';
        sleep 3600;
      done"
    restart: unless-stopped
    depends_on:
      - solbot-prod

  # Prometheusモニタリングサービス
  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    networks:
      - app-network

  # Grafanaダッシュボードサービス
  grafana:
    image: grafana/grafana:8.5.2
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=solbot123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - '3000:3000'
    networks:
      - app-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:v0.24.0
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - '9093:9093'
    networks:
      - app-network
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - app-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.44.0
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - '8080:8080'
    networks:
      - app-network

volumes:
  # 永続化するボリュームを定義
  node_modules:
  prometheus_data:
  grafana_data:
  # ログローテーション設定を永続化
  logrotateconfig:

networks:
  # ネットワークの定義
  app-network:
    driver: bridge
