name: Deploy to Staging

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  AWS_REGION: ap-northeast-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success() || github.event.inputs.force_deploy == 'true'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4

      - name: Create deployment archive
        run: |
          # Create a clean archive excluding unnecessary files
          # Use a temporary directory to avoid "file changed as we read it" errors
          
          # Save current workspace path
          WORKSPACE_DIR=$(pwd)
          echo "Workspace directory: $WORKSPACE_DIR"
          
          # Create temporary staging directory
          mkdir -p /tmp/solbot-staging
          
          # Copy files to staging, excluding unwanted directories
          rsync -av \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='.github/' \
            --exclude='*.log' \
            --exclude='.env' \
            --exclude='solbot-app.tar.gz' \
            ./ /tmp/solbot-staging/
          
          # Create archive from staging directory
          cd /tmp/solbot-staging
          tar -czf solbot-app.tar.gz .
          
          # Move archive back to workspace
          mv solbot-app.tar.gz "$WORKSPACE_DIR/"
          
          # Cleanup staging directory
          cd "$WORKSPACE_DIR"
          rm -rf /tmp/solbot-staging
          
          # Display archive info
          ls -la solbot-app.tar.gz
          echo "Archive contents preview:"
          tar -tzf solbot-app.tar.gz | head -20

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::475538532274:role/solbot-ci
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload application archive
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          source: "solbot-app.tar.gz"
          target: "/tmp/"

      - name: Deploy Application to Staging Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          timeout: 10m
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== SOL Bot Staging Deployment ==="
            echo "Commit: ${{ github.sha }}"
            echo "Triggered by: ${{ github.actor }}"
            echo "Timestamp: $(date)"
            
            # Clean up any existing Node.js installations and install fresh
            echo "Cleaning up existing Node.js installations..."
            
            # Wait for any existing yum operations to complete
            echo "Waiting for any existing yum locks to clear..."
            sudo fuser -k /var/run/yum.pid 2>/dev/null || true
            sleep 2
            
            # Remove NVM and its Node.js installations
            if [ -d "$HOME/.nvm" ]; then
              echo "Removing NVM installation..."
              rm -rf "$HOME/.nvm"
            fi
            
            # Remove any existing Node.js/npm symlinks
            sudo rm -f /usr/local/bin/node /usr/local/bin/npm
            
            # Remove from PATH any NVM references
            export PATH=$(echo $PATH | sed 's|[^:]*\.nvm[^:]*:||g')
            
            # Check OS version and install appropriate Node.js
            OS_VERSION=$(grep VERSION_ID /etc/os-release | cut -d'"' -f2)
            echo "Detected OS version: $OS_VERSION"
            
            if [[ "$OS_VERSION" =~ ^2023 ]]; then
              # Amazon Linux 2023 - use dnf with Node.js 18+
              echo "Installing Node.js 18 on Amazon Linux 2023..."
              sudo dnf install -y nodejs npm
            elif [[ "$OS_VERSION" =~ ^2\. ]]; then
              # Amazon Linux 2 - try Amazon Linux Extras first
              echo "Installing Node.js on Amazon Linux 2..."
              if sudo amazon-linux-extras list | grep -q "nodejs18"; then
                echo "Installing Node.js 18 via Amazon Linux Extras..."
                sudo amazon-linux-extras install nodejs18 -y
              elif sudo amazon-linux-extras list | grep -q "nodejs16"; then
                echo "Installing Node.js 16 via Amazon Linux Extras..."
                sudo amazon-linux-extras install nodejs16 -y
              else
                echo "No Node.js topics found in Amazon Linux Extras, using NodeSource..."
                curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                sudo yum install -y nodejs
              fi
            else
              echo "Unknown OS version, trying dnf installation..."
              sudo dnf install -y nodejs npm || {
                echo "dnf failed, trying NodeSource..."
                curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                sudo yum install -y nodejs || sudo dnf install -y nodejs npm
              }
            fi
            
            # Ensure npm is installed
            if ! command -v npm &> /dev/null; then
              echo "npm not found, installing npm separately..."
              sudo yum install -y npm
            fi
            
            # Verify installation
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            echo "Node.js path: $(which node)"
            echo "npm path: $(which npm)"
            
            # Create solbot user if not exists
            if ! id solbot &>/dev/null; then
              echo "Creating solbot user..."
              sudo useradd -m -s /bin/bash solbot
              sudo mkdir -p /opt/solbot
              sudo chown -R solbot:solbot /opt/solbot
            fi
            
            # Install dependencies
            cd /opt/solbot
            
            # Verify npm is available
            echo "Verifying npm availability..."
            which npm
            npm --version
            
            # Initialize application directory
            if [ ! -f /opt/solbot/package.json ]; then
              echo "Initializing application directory..."
              sudo -u solbot mkdir -p /opt/solbot/{logs,data,config}
              echo "Application directory structure created"
            fi
            
            # Install git if not present
            if ! command -v git &> /dev/null; then
              echo "Installing git..."
              sudo dnf install -y git
            fi
            
            # Deploy application code
            echo "Deploying application code..."
            sudo rm -rf /opt/solbot/*
            sudo mkdir -p /opt/solbot
            
            # Extract application archive
            echo "Extracting application archive..."
            sudo -u solbot tar -xzf /tmp/solbot-app.tar.gz -C /opt/solbot
            sudo chown -R solbot:solbot /opt/solbot
            
            echo "Application files deployed successfully"
            ls -la /opt/solbot/
            
            # Install dependencies as solbot user
            echo "Installing dependencies as solbot user..."
            sudo -u solbot bash -c '
              export PATH="/usr/bin:/usr/local/bin:$PATH"
              unset NVM_DIR
              cd /opt/solbot
              echo "Working directory: $(pwd)"
              echo "Node.js version: $(node --version)"
              echo "npm version: $(npm --version)"
              
              # Install production dependencies
              echo "Installing npm dependencies..."
              npm ci --production
              
              # Create required directories
              mkdir -p data logs config
              
              # Create environment file (placeholder for future SSM integration)
              if [ ! -f .env ]; then
                echo "Creating placeholder .env file..."
                cat > .env << "ENV_EOF"
                # Placeholder environment file
                # In production, this will be managed by AWS SSM Parameter Store
                                NODE_ENV=production
                                PORT=3000
                                LOG_LEVEL=info
                ENV_EOF
              fi
              
              echo "Application deployment completed"
            '
            
            # Check if systemd service exists
            if [ ! -f /etc/systemd/system/bot.service ]; then
              echo "Creating bot.service systemd file..."
              sudo tee /etc/systemd/system/bot.service > /dev/null <<SERVICE
                              [Unit]
                              Description=SOL Bot Application
                              After=network.target
                              
                              [Service]
                              Type=simple
                              User=solbot
                              WorkingDirectory=/opt/solbot
                              ExecStart=/usr/bin/node index.js
                              Restart=always
                              RestartSec=10
                              Environment=NODE_ENV=production
                              StandardOutput=journal
                              StandardError=journal
              
              [Install]
              WantedBy=multi-user.target
              SERVICE
              sudo systemctl daemon-reload
              sudo systemctl enable bot.service
            fi
            
            # Stop service if running
            if sudo systemctl is-active --quiet bot.service; then
              echo "Stopping bot.service..."
              sudo systemctl stop bot.service
              sleep 2
            fi
            
            # For now, just verify the setup is complete
            echo "✓ SOL Bot user and service configuration complete"
            echo "✓ Node.js $(node --version) installed"
            echo "✓ Directory structure: $(ls -la /opt/solbot/)"
            echo "✓ Service file: $(ls -la /etc/systemd/system/bot.service)"

      - name: Start Service and Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          timeout: 10m
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== Service Startup and Health Check ==="
            
            # Verify deployment
            echo "Verifying application deployment..."
            cd /opt/solbot
            echo "Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
            echo "Index.js exists: $(test -f index.js && echo 'YES' || echo 'NO')"
            echo "Node modules: $(test -d node_modules && echo 'YES' || echo 'NO')"
            
            # Start the service
            echo "Starting bot.service..."
            sudo systemctl start bot.service
            
            # Wait for startup
            echo "Waiting for service to start..."
            sleep 10
            
            # Check service status
            echo "Checking service status..."
            sudo systemctl status bot.service --no-pager || true
            
            # Wait a bit more for the application to fully initialize
            echo "Waiting for application initialization..."
            sleep 15
            
            # Health check with retries
            echo "Performing health check..."
            HEALTH_CHECK_URL="http://localhost:3000/api/status"
            MAX_RETRIES=6
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
              
              if curl -f -s --connect-timeout 10 --max-time 30 "$HEALTH_CHECK_URL"; then
                echo ""
                echo "✅ Health check passed!"
                echo "✅ SOL Bot is running successfully"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Health check failed, retrying in 10 seconds..."
                  sleep 10
                else
                  echo "❌ Health check failed after $MAX_RETRIES attempts"
                  echo "Service logs:"
                  sudo journalctl -u bot.service --no-pager --lines=20
                  echo "Port check:"
                  sudo netstat -tulpn | grep :3000 || echo "Port 3000 not listening"
                  exit 1
                fi
              fi
            done
            
            # Final verification
            echo "=== Final Verification ==="
            echo "Service status: $(sudo systemctl is-active bot.service)"
            echo "Service enabled: $(sudo systemctl is-enabled bot.service)"
            echo "Process check: $(pgrep -f 'node.*index.js' | wc -l) processes running"
            echo ""
            echo "🎉 Deployment completed successfully!"
            echo "🚀 SOL Bot is now running on staging environment"

      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          timeout: 3m
          command_timeout: 5m
          script: |
            # Clean up temporary deployment files
            sudo rm -rf /tmp/solbot-deploy-${{ github.sha }}
            echo "✓ Cleaned up temporary files"

      - name: Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: 'SOL-Bot Staging Deployment'
          description: |
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Staging Environment: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
            Deployment Result: ${{ job.status }}
          color: ${{ job.status == 'success' && 0x00FF00 || 0xFF0000 }}
          ack_no_webhook: true
