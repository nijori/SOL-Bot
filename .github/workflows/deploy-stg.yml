name: Deploy to Staging

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  AWS_REGION: ap-northeast-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success() || github.event.inputs.force_deploy == 'true'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::475538532274:role/solbot-ci
          aws-region: ${{ env.AWS_REGION }}

      - name: ステージング環境にアプリケーションをデプロイ
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          timeout: 10m
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== SOL Bot Staging Deployment ==="
            echo "Commit: ${{ github.sha }}"
            echo "Triggered by: ${{ github.actor }}"
            echo "Timestamp: $(date)"
            
            # Clean up any existing Node.js installations and install fresh
            echo "Cleaning up existing Node.js installations..."
            
            # Wait for any existing yum operations to complete
            echo "Waiting for any existing yum locks to clear..."
            sudo fuser -k /var/run/yum.pid 2>/dev/null || true
            sleep 2
            
            # Remove NVM and its Node.js installations
            if [ -d "$HOME/.nvm" ]; then
              echo "Removing NVM installation..."
              rm -rf "$HOME/.nvm"
            fi
            
            # Remove any existing Node.js/npm symlinks
            sudo rm -f /usr/local/bin/node /usr/local/bin/npm
            
            # Remove from PATH any NVM references
            export PATH=$(echo $PATH | sed 's|[^:]*\.nvm[^:]*:||g')
            
            # Check OS version and install appropriate Node.js
            OS_VERSION=$(grep VERSION_ID /etc/os-release | cut -d'"' -f2)
            echo "Detected OS version: $OS_VERSION"
            
            if [[ "$OS_VERSION" =~ ^2023 ]]; then
              # Amazon Linux 2023 - use dnf with Node.js 18+
              echo "Installing Node.js 18 on Amazon Linux 2023..."
              sudo dnf install -y nodejs npm
            elif [[ "$OS_VERSION" =~ ^2\. ]]; then
              # Amazon Linux 2 - try Amazon Linux Extras first
              echo "Installing Node.js on Amazon Linux 2..."
              if sudo amazon-linux-extras list | grep -q "nodejs18"; then
                echo "Installing Node.js 18 via Amazon Linux Extras..."
                sudo amazon-linux-extras install nodejs18 -y
              elif sudo amazon-linux-extras list | grep -q "nodejs16"; then
                echo "Installing Node.js 16 via Amazon Linux Extras..."
                sudo amazon-linux-extras install nodejs16 -y
              else
                echo "No Node.js topics found in Amazon Linux Extras, using NodeSource..."
                curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                sudo yum install -y nodejs
              fi
            else
              echo "Unknown OS version, trying dnf installation..."
              sudo dnf install -y nodejs npm || {
                echo "dnf failed, trying NodeSource..."
                curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                sudo yum install -y nodejs || sudo dnf install -y nodejs npm
              }
            fi
            
            # Ensure npm is installed
            if ! command -v npm &> /dev/null; then
              echo "npm not found, installing npm separately..."
              sudo yum install -y npm
            fi
            
            # Verify installation
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            echo "Node.js path: $(which node)"
            echo "npm path: $(which npm)"
            
            # Create solbot user if not exists
            if ! id solbot &>/dev/null; then
              echo "Creating solbot user..."
              sudo useradd -m -s /bin/bash solbot
              sudo mkdir -p /opt/solbot
              sudo chown -R solbot:solbot /opt/solbot
            fi
            
            # Install dependencies
            cd /opt/solbot
            
            # Verify npm is available
            echo "Verifying npm availability..."
            which npm
            npm --version
            
            # Initialize application directory
            if [ ! -f /opt/solbot/package.json ]; then
              echo "Initializing application directory..."
              sudo -u solbot mkdir -p /opt/solbot/{logs,data,config}
              echo "Application directory structure created"
            fi
            
            # Clean solbot user environment and install dependencies
            echo "Installing dependencies as solbot user..."
            sudo -u solbot bash -c '
              # Clean any NVM references from solbot user
              export PATH="/usr/bin:/usr/local/bin:$PATH"
              unset NVM_DIR
              echo "solbot user - Node.js path: $(which node)"
              echo "solbot user - npm path: $(which npm)"
              echo "solbot user - Node.js version: $(node --version)"
              echo "solbot user - npm version: $(npm --version)"
              # TODO: npm ci --production (需要先部署代码)
              echo "Skipping npm ci for now - need to deploy code first"
            '
            
            # Build TypeScript (一時的に無効化 - CommonJS移行中)
            # sudo -u solbot npm run build || echo "Warning: Build failed or no build script"
            
            # Check if systemd service exists
            if [ ! -f /etc/systemd/system/bot.service ]; then
              echo "Creating bot.service systemd file..."
              sudo tee /etc/systemd/system/bot.service > /dev/null <<SERVICE
            [Unit]
            Description=SOL Bot Application
            After=network.target
            
            [Service]
            Type=simple
            User=solbot
            WorkingDirectory=/opt/solbot
            ExecStart=/usr/bin/node index.js
            Restart=always
            RestartSec=10
            Environment=NODE_ENV=production
            StandardOutput=journal
            StandardError=journal
            
            [Install]
            WantedBy=multi-user.target
            SERVICE
              sudo systemctl daemon-reload
              sudo systemctl enable bot.service
            fi
            
            # Stop service if running
            if sudo systemctl is-active --quiet bot.service; then
              echo "Stopping bot.service..."
              sudo systemctl stop bot.service
              sleep 2
            fi
            
            # For now, just verify the setup is complete
            echo "✓ SOL Bot user and service configuration complete"
            echo "✓ Node.js $(node --version) installed"
            echo "✓ Directory structure: $(ls -la /opt/solbot/)"
            echo "✓ Service file: $(ls -la /etc/systemd/system/bot.service)"

      - name: インフラストラクチャ確認
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          timeout: 5m
          command_timeout: 10m
          script: |
            set -e
            
            echo "=== Infrastructure Verification ==="
            
            # Verify user setup
            echo "Checking solbot user..."
            id solbot
            
            # Verify directory structure
            echo "Checking directory structure..."
            ls -la /opt/solbot/
            
            # Verify service file
            echo "Checking service file..."
            ls -la /etc/systemd/system/bot.service
            
            # Verify Node.js setup
            echo "Checking Node.js setup..."
            node --version
            npm --version
            
            echo "✓ Infrastructure setup verification complete"
            echo "=== Ready for Application Deployment ==="

      - name: クリーンアップ
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.STG_SSH_KEY }}
          timeout: 3m
          command_timeout: 5m
          script: |
            # Clean up temporary deployment files
            sudo rm -rf /tmp/solbot-deploy-${{ github.sha }}
            echo "✓ Cleaned up temporary files"

      - name: Discordへの通知
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: 'SOL-Bot ステージングデプロイ'
          description: |
            リポジトリ: ${{ github.repository }}
            コミット: ${{ github.sha }}
            ステージング環境: ec2-13-158-58-241.ap-northeast-1.compute.amazonaws.com
            デプロイ結果: ${{ job.status }}
          color: ${{ job.status == 'success' && 0x00FF00 || 0xFF0000 }}
