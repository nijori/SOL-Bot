name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      reason:
        description: 'ÊâãÂãï„Éá„Éó„É≠„Ç§„ÅÆÁêÜÁî±'
        required: true
        default: 'ÂÆöÊúü„É°„É≥„ÉÜ„Éä„É≥„Çπ'
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  AWS_REGION: ap-northeast-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success() || github.event.inputs.force_deploy == 'true'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4

      - name: Create deployment archive
        run: |
          # Create a clean archive excluding unnecessary files
          # Use a more robust approach to avoid file change errors
          
          # Save current workspace path
          WORKSPACE_DIR=$(pwd)
          echo "Workspace directory: $WORKSPACE_DIR"
          
          # Create temporary staging directory with unique name
          STAGING_DIR="/tmp/solbot-staging-$$"
          mkdir -p "$STAGING_DIR"
          
          # Copy files to staging, excluding unwanted directories
          echo "Copying files to staging directory..."
          rsync -av \
            --exclude='.git/' \
            --exclude='node_modules/' \
            --exclude='.github/' \
            --exclude='*.log' \
            --exclude='.env' \
            --exclude='solbot-app.tar.gz' \
            ./ "$STAGING_DIR/"
          
          echo "Files copied successfully. Creating archive..."
          
          # Wait a moment to ensure all file operations are complete
          sleep 1
          
          # Create archive using absolute paths to avoid current directory issues
          tar --create \
              --gzip \
              --file="$WORKSPACE_DIR/solbot-app.tar.gz" \
              --directory="$STAGING_DIR" \
              --exclude-from=<(echo -e ".git\nnode_modules\n.github\n*.log\n.env") \
              .
          
          # Cleanup staging directory
          rm -rf "$STAGING_DIR"
          
          # Display archive info
          cd "$WORKSPACE_DIR"
          ls -la solbot-app.tar.gz
          echo "Archive contents preview:"
          tar -tzf solbot-app.tar.gz | head -20

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::475538532274:role/solbot-ci
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve environment variables from SSM Parameter Store
        run: |
          echo "Retrieving production environment variables from SSM Parameter Store..."
          
          # Get environment variables from SSM Parameter Store
          SSM_PARAMETERS=$(aws ssm get-parameter \
            --name "/solbot/prod/env" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text)
          
          # Create .env file for deployment
          echo "$SSM_PARAMETERS" > deployment.env
          echo "‚úÖ Production environment variables retrieved and saved to deployment.env file"
          
          # Verify the .env file was created (but don't show contents for security)
          if [ -f deployment.env ]; then
            echo "‚úÖ deployment.env file created successfully"
            echo "üìÑ File size: $(wc -c < deployment.env) bytes"
            echo "üìÑ Line count: $(wc -l < deployment.env) lines"
          else
            echo "‚ùå Failed to create deployment.env file"
            exit 1
          fi

      - name: Upload environment variables to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "deployment.env"
          target: "/tmp/"

      - name: Upload application archive
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          source: "solbot-app.tar.gz"
          target: "/tmp/"

      - name: Deploy Application to Production Environment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          timeout: 10m
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== SOL Bot Production Deployment ==="
            echo "Commit: ${{ github.sha }}"
            echo "Triggered by: ${{ github.actor }}"
            echo "Timestamp: $(date)"
            ${{ github.event.inputs.reason && format('Deployment reason: {0}', github.event.inputs.reason) || '' }}
            
            # Clean up any existing Node.js installations and install fresh
            echo "Cleaning up existing Node.js installations..."
            
            # Wait for any existing yum operations to complete
            echo "Waiting for any existing yum locks to clear..."
            sudo fuser -k /var/run/yum.pid 2>/dev/null || true
            sleep 2
            
            # Remove NVM and its Node.js installations
            if [ -d "$HOME/.nvm" ]; then
              echo "Removing NVM installation..."
              rm -rf "$HOME/.nvm"
            fi
            
            # Remove any existing Node.js/npm symlinks
            sudo rm -f /usr/local/bin/node /usr/local/bin/npm
            
            # Remove from PATH any NVM references
            export PATH=$(echo $PATH | sed 's|[^:]*\.nvm[^:]*:||g')
            
            # Check OS version and install appropriate Node.js
            OS_VERSION=$(grep VERSION_ID /etc/os-release | cut -d'"' -f2)
            echo "Detected OS version: $OS_VERSION"
            
            if [[ "$OS_VERSION" =~ ^2023 ]]; then
              # Amazon Linux 2023 - use existing Node.js installation
              echo "Using existing Node.js installation on Amazon Linux 2023..."
              if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
                echo "Installing Node.js 18 on Amazon Linux 2023..."
                sudo dnf install -y nodejs npm
              else
                echo "Node.js and npm are already installed"
              fi
            elif [[ "$OS_VERSION" =~ ^2\. ]]; then
              # Amazon Linux 2 - try Amazon Linux Extras first
              echo "Installing Node.js on Amazon Linux 2..."
              if sudo amazon-linux-extras list | grep -q "nodejs18"; then
                echo "Installing Node.js 18 via Amazon Linux Extras..."
                sudo amazon-linux-extras install nodejs18 -y
              elif sudo amazon-linux-extras list | grep -q "nodejs16"; then
                echo "Installing Node.js 16 via Amazon Linux Extras..."
                sudo amazon-linux-extras install nodejs16 -y
              else
                echo "No Node.js topics found in Amazon Linux Extras, using NodeSource..."
                curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                sudo yum install -y nodejs
              fi
            else
              echo "Unknown OS version, trying dnf installation..."
              sudo dnf install -y nodejs npm || {
                echo "dnf failed, trying NodeSource..."
                curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
                sudo yum install -y nodejs || sudo dnf install -y nodejs npm
              }
            fi
            
            # Ensure npm is installed
            if ! command -v npm &> /dev/null; then
              echo "npm not found, installing npm separately..."
              sudo yum install -y npm
            fi
            
            # Verify installation
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            echo "Node.js path: $(which node)"
            echo "npm path: $(which npm)"
            
            # Create solbot user if not exists
            if ! id solbot &>/dev/null; then
              echo "Creating solbot user..."
              sudo useradd -m -s /bin/bash solbot
            fi
            
            # Create production directory first
            echo "Creating production directory structure..."
            sudo mkdir -p /opt/solbot-prod
            sudo chown -R solbot:solbot /opt/solbot-prod
            
            # Change to production directory
            cd /opt/solbot-prod
            
            # Verify npm is available
            echo "Verifying npm availability..."
            which npm
            npm --version
            
            # Initialize application directory
            if [ ! -f /opt/solbot-prod/package.json ]; then
              echo "Initializing production application directory..."
              sudo -u solbot mkdir -p /opt/solbot-prod/{logs,data,config}
              echo "Production application directory structure created"
            fi
            
            # Install git if not present
            if ! command -v git &> /dev/null; then
              echo "Installing git..."
              sudo dnf install -y git
            fi
            
            # Deploy application code to production directory
            echo "Deploying application code to production directory..."
            sudo rm -rf /opt/solbot-prod/*
            sudo mkdir -p /opt/solbot-prod
            sudo chown -R solbot:solbot /opt/solbot-prod
            
            # Extract application archive
            echo "Extracting application archive..."
            sudo -u solbot tar -xzf /tmp/solbot-app.tar.gz -C /opt/solbot-prod
            sudo chown -R solbot:solbot /opt/solbot-prod
            
            echo "Production application files deployed successfully"
            ls -la /opt/solbot-prod/
            
            # Install dependencies and build application as solbot user
            echo "Installing dependencies and building application as solbot user..."
            sudo -u solbot bash -c '
              export PATH="/usr/bin:/usr/local/bin:$PATH"
              unset NVM_DIR
              cd /opt/solbot-prod
              echo "Working directory: $(pwd)"
              echo "Node.js version: $(node --version)"
              echo "npm version: $(npm --version)"
              
              # Install all dependencies (including devDependencies for TypeScript compilation)
              echo "Installing npm dependencies..."
              npm ci
              
              # Build the TypeScript application
              echo "Building TypeScript application..."
              npm run build
              
              # Verify build output
              echo "Verifying build output..."
              if [ -f "dist/index.js" ]; then
                echo "‚úì Build successful - dist/index.js exists"
                ls -la dist/
              else
                echo "‚úó Build failed - dist/index.js not found"
                exit 1
              fi
              
              # Create required directories
              mkdir -p data logs config env.d
              
              # Deploy environment variables from SSM Parameter Store
              echo "Deploying environment variables from SSM Parameter Store..."
              if [ -f "/tmp/deployment.env" ]; then
                # Copy environment file to application directory
                cp /tmp/deployment.env .env
                
                # Also create backup in env.d directory for runtime access
                cp /tmp/deployment.env env.d/runtime
                
                echo "‚úÖ Environment variables deployed from SSM Parameter Store"
                echo "üìÑ Environment file size: $(wc -c < .env) bytes"
                
                # Secure the environment files
                chmod 600 .env env.d/runtime
                
                # Clean up temporary file
                rm -f /tmp/deployment.env
              else
                echo "‚ö†Ô∏è  Warning: No environment file found from SSM, creating minimal .env"
                echo "NODE_ENV=production" > .env
                echo "PORT=3000" >> .env
                echo "LOG_LEVEL=info" >> .env
                chmod 600 .env
              fi
              
              echo "Application deployment and build completed"
            '
            
            # Create or update systemd service file for production
            echo "Creating/updating bot-prod.service systemd file..."
            sudo bash -c "echo '[Unit]' > /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'Description=SOL Bot Production Application' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'After=network.target' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo '' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo '[Service]' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'Type=simple' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'User=solbot' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'WorkingDirectory=/opt/solbot-prod' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'ExecStart=/usr/bin/node dist/index.js' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'Restart=always' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'RestartSec=10' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'Environment=NODE_ENV=production' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'Environment=PORT=3001' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'StandardOutput=journal' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'StandardError=journal' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo '' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo '[Install]' >> /etc/systemd/system/bot-prod.service"
            sudo bash -c "echo 'WantedBy=multi-user.target' >> /etc/systemd/system/bot-prod.service"
            
            # Verify the service file content
            echo "Production service file content:"
            sudo cat /etc/systemd/system/bot-prod.service
            
            sudo systemctl daemon-reload
            sudo systemctl enable bot-prod.service
            
            # Stop service if running
            if sudo systemctl is-active --quiet bot-prod.service; then
              echo "Stopping bot-prod.service..."
              sudo systemctl stop bot-prod.service
              sleep 2
            fi
            
            # For now, just verify the setup is complete
            echo "‚úì SOL Bot production user and service configuration complete"
            echo "‚úì Node.js $(node --version) installed"
            echo "‚úì Production directory structure: $(ls -la /opt/solbot-prod/)"
            echo "‚úì Production service file: $(ls -la /etc/systemd/system/bot-prod.service)"

      - name: Start Service and Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          timeout: 10m
          command_timeout: 15m
          script: |
            set -e
            
            echo "=== Production Service Startup and Health Check ==="
            
            # Verify deployment
            echo "Verifying production application deployment..."
            cd /opt/solbot-prod
            echo "Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
            echo "Built index.js exists: $(test -f dist/index.js && echo 'YES' || echo 'NO')"
            echo "Source index.ts exists: $(test -f src/index.ts && echo 'YES' || echo 'NO')"
            echo "Node modules: $(test -d node_modules && echo 'YES' || echo 'NO')"
            echo "Dist directory: $(test -d dist && echo 'YES' || echo 'NO')"
            
            # Start the service
            echo "Starting bot-prod.service..."
            sudo systemctl start bot-prod.service
            
            # Wait for startup
            echo "Waiting for service to start..."
            sleep 10
            
            # Check service status
            echo "Checking production service status..."
            sudo systemctl status bot-prod.service --no-pager || true
            
            # Wait a bit more for the application to fully initialize
            echo "Waiting for application initialization..."
            sleep 15
            
            # Health check with retries
            echo "Performing production health check..."
            HEALTH_CHECK_URL="http://localhost:3001/api/status"
            MAX_RETRIES=6
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
              
              if curl -f -s --connect-timeout 10 --max-time 30 "$HEALTH_CHECK_URL"; then
                echo ""
                echo "‚úÖ Health check passed!"
                echo "‚úÖ SOL Bot is running successfully in production"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Health check failed, retrying in 10 seconds..."
                  sleep 10
                else
                  echo "‚ùå Production health check failed after $MAX_RETRIES attempts"
                  echo "Production service logs:"
                  sudo journalctl -u bot-prod.service --no-pager --lines=20
                  echo "Port check:"
                  sudo netstat -tulpn | grep :3001 || echo "Port 3001 not listening"
                  exit 1
                fi
              fi
            done
            
            # Final verification
            echo "=== Final Production Verification ==="
            echo "Production service status: $(sudo systemctl is-active bot-prod.service)"
            echo "Production service enabled: $(sudo systemctl is-enabled bot-prod.service)"
            echo "Process check: $(pgrep -f 'node.*index.js' | wc -l) processes running"
            echo ""
            echo "üéâ Production deployment completed successfully!"
            echo "üöÄ SOL Bot is now running on production environment"

      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          timeout: 3m
          command_timeout: 5m
          script: |
            # Clean up temporary deployment files
            sudo rm -rf /tmp/solbot-deploy-${{ github.sha }}
            echo "‚úì Cleaned up temporary files"

      - name: Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always() && secrets.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: 'SOL-Bot Production Deployment'
          description: |
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Production Environment: ${{ secrets.PROD_HOST }}
            Deployment Result: ${{ job.status }}
            ${{ github.event.inputs.reason && format('Reason: {0}', github.event.inputs.reason) || '' }}
          color: ${{ job.status == 'success' && 0x00FF00 || 0xFF0000 }}
          ack_no_webhook: true

  # TST-085: "30 s Stop" CI „Ç§„É≥„ÉÜ„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà (Production)
  thirty-second-stop-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: 30 Second Stop Integration Test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          timeout: 2m
          command_timeout: 3m
          script: |
            set -e
            
            echo "=== TST-085: 30 Second Stop Integration Test (Production) ==="
            echo "Testing graceful service shutdown within 30 seconds"
            echo "Timestamp: $(date)"
            
            # Pre-test verification: Ensure service is running
            echo "Pre-test: Verifying service is active..."
            if ! sudo systemctl is-active --quiet bot-prod.service; then
              echo "‚ùå ERROR: bot-prod.service is not active before test"
              sudo systemctl status bot-prod.service --no-pager
              exit 1
            fi
            echo "‚úì Service is active before test"
            
            # Record start time for 30-second measurement
            START_TIME=$(date +%s)
            echo "Stop command initiated at: $(date)"
            
            # Execute stop command with timeout protection
            echo "Executing systemctl stop bot-prod.service..."
            timeout 30s sudo systemctl stop bot-prod.service
            STOP_EXIT_CODE=$?
            
            # Calculate elapsed time
            END_TIME=$(date +%s)
            ELAPSED_TIME=$((END_TIME - START_TIME))
            echo "Stop command completed in: ${ELAPSED_TIME} seconds"
            
            # Validate results
            if [ $STOP_EXIT_CODE -eq 0 ]; then
              if [ $ELAPSED_TIME -le 30 ]; then
                echo "‚úÖ SUCCESS: Service stopped gracefully in ${ELAPSED_TIME} seconds (‚â§30s)"
              else
                echo "‚ùå FAIL: Service took ${ELAPSED_TIME} seconds to stop (>30s limit)"
                exit 1
              fi
            elif [ $STOP_EXIT_CODE -eq 124 ]; then
              echo "‚ùå FAIL: Service stop timed out after 30 seconds"
              exit 1
            else
              echo "‚ùå FAIL: Service stop failed with exit code $STOP_EXIT_CODE"
              sudo systemctl status bot-prod.service --no-pager
              exit 1
            fi
            
            # Verify service is actually stopped
            echo "Verifying service is stopped..."
            if sudo systemctl is-active --quiet bot-prod.service; then
              echo "‚ùå FAIL: Service still active after stop command"
              exit 1
            fi
            echo "‚úì Service confirmed stopped"
            
            # Recovery: Restart service
            echo "Recovery: Restarting service..."
            sudo systemctl start bot-prod.service
            
            # Wait for service to start
            echo "Waiting for service restart..."
            sleep 10
            
            # Verify service restart
            if ! sudo systemctl is-active --quiet bot-prod.service; then
              echo "‚ùå FAIL: Service failed to restart"
              sudo systemctl status bot-prod.service --no-pager
              sudo journalctl -u bot-prod.service --no-pager --lines=10
              exit 1
            fi
            echo "‚úì Service successfully restarted"
            
            # Health check after restart
            echo "Performing health check after restart..."
            HEALTH_CHECK_URL="http://localhost:3001/api/status"
            MAX_RETRIES=6
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
              
              if curl -f -s --connect-timeout 10 --max-time 30 "$HEALTH_CHECK_URL"; then
                echo ""
                echo "‚úÖ Health check passed after restart"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Health check failed, retrying in 10 seconds..."
                  sleep 10
                else
                  echo "‚ùå Health check failed after restart"
                  sudo journalctl -u bot-prod.service --no-pager --lines=20
                  exit 1
                fi
              fi
            done
            
            # PnL=0 verification (placeholder for future implementation)
            echo "PnL verification (placeholder)..."
            # Note: Actual PnL check will be implemented when /api/account endpoint is available
            # Expected: curl -s "$HEALTH_CHECK_URL/account" | jq '.dailyPnL' should equal 0
            echo "‚úì PnL verification placeholder passed (TODO: implement /api/account endpoint)"
            
            echo ""
            echo "üéâ TST-085 Integration Test PASSED (Production)"
            echo "üìä Results Summary:"
            echo "   - Stop time: ${ELAPSED_TIME}s (limit: 30s)"
            echo "   - Service recovery: ‚úÖ"
            echo "   - Health check: ‚úÖ"
            echo "   - PnL verification: ‚úÖ (placeholder)"

      - name: Test Results Notification
        uses: sarisia/actions-status-discord@v1
        if: always() && secrets.DISCORD_WEBHOOK_URL != ''
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: 'TST-085: 30-Second Stop Test (Production)'
          description: |
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Test: 30-second graceful shutdown + recovery (Production)
            Result: ${{ job.status }}
          color: ${{ job.status == 'success' && 0x00FF00 || 0xFF0000 }}
          ack_no_webhook: true
