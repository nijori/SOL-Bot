name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        
      # TST-061: テスト分割実行とパラレル化の実装
      - name: Run tests in parallel (fast group)
        run: npm run test:parallel:fast
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 10

      - name: Run tests in parallel (medium group)
        run: npm run test:parallel:medium
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 15

      - name: Run tests in parallel (slow group)
        run: npm run test:parallel:slow
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 20

      - name: Run tests in parallel (core group)
        run: npm run test:parallel:core
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 20

      - name: Run tests in parallel (heavy group) 
        run: npm run test:parallel:heavy
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
        timeout-minutes: 25
        
      - name: Run ESM tests
        run: |
          mkdir -p data/test
          mkdir -p data/test-e2e
          mkdir -p .jest-cache
          npm run test:parallel:esm
        env:
          NODE_OPTIONS: '--experimental-vm-modules --max-old-space-size=4096'
        timeout-minutes: 20
        continue-on-error: true # ESMテストはまだ完全に安定していないため

      - name: Run smoke test
        run: npm run test:smoke
        continue-on-error: true # スモークテストは環境によって失敗する可能性があるため続行

      - name: Check for incomplete todo tasks in PRs
        if: github.event_name == 'pull_request'
        run: |
          if grep -q "- \[ \]" .todo/*.mdc; then
            echo "Error: There are uncompleted tasks in the todo files"
            grep "- \[ \]" .todo/*.mdc
            exit 1  # PRの場合は未完了タスクがあると失敗させる
          fi

  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  deploy:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          APP_DIR: ${{ secrets.APP_DIR }}
        run: |
          # パッケージファイルと設定ファイルをコピー
          scp -r dist package.json package-lock.json .env.example ${EC2_USER}@${EC2_HOST}:${APP_DIR}/

          # リモートでのコマンド実行
          ssh ${EC2_USER}@${EC2_HOST} << 'EOF'
            cd ${APP_DIR}
            # .envが存在しなければ.env.exampleからコピー
            [ ! -f .env ] && cp .env.example .env
            npm ci --production
            # 実行中のプロセスを停止
            pm2 stop sol-bot || true
            # 新しいバージョンで起動
            pm2 start dist/index.js --name sol-bot
            # PM2の設定を保存
            pm2 save
          EOF

      - name: Notify deployment
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: 'SOL-Bot デプロイ通知'
          description: |
            デプロイステータス: 成功 ✅
            ブランチ: ${{ github.ref }}
            コミット: ${{ github.sha }}
            デプロイ日時: $(date)
            デプロイユーザー: ${{ github.actor }}
