name: Security Scan

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    - cron: '0 0 * * *' # 毎日UTCの0:00に実行

jobs:
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴をフェッチ

      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate SBOM with CycloneDX
        uses: CycloneDX/gh-node-module-generatebom@master
        with:
          path: ./
          output: ./bom.xml

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v3
        with:
          name: cyclonedx-sbom
          path: ./bom.xml

      - name: Analyze SBOM with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'sbom'
          input: ./bom.xml
          format: 'table'
          exit-code: '0' # 情報提供のみなので失敗させない

  security-report:
    name: Security Report Generation
    needs: [secrets-scan, dependency-scan, sbom-generation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          echo "## Overview" >> security-report.md

          if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
            echo "- ✅ Secrets Scan: PASSED" >> security-report.md
          else
            echo "- ❌ Secrets Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "- ✅ Dependency Scan: PASSED" >> security-report.md
          else
            echo "- ❌ Dependency Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.sbom-generation.result }}" == "success" ]; then
            echo "- ✅ SBOM Generation: PASSED" >> security-report.md
          else
            echo "- ❌ SBOM Generation: FAILED" >> security-report.md
          fi

          echo "## Recommendations" >> security-report.md
          echo "- Keep dependencies up to date" >> security-report.md
          echo "- Review SBOM for any deprecated packages" >> security-report.md
          echo "- Ensure proper secrets management" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: ./security-report.md
