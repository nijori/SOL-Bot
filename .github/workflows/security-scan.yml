name: Security Scan

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - '.github/workflows/security-scan.yml'
  schedule:
    - cron: '0 0 * * *' # 毎日UTCの0:00に実行（全体スキャン）
    - cron: '0 1 * * 1' # 毎週月曜日AM 1:00（UTC）に実行（詳細脆弱性スキャン）
  # 手動実行も可能
  workflow_dispatch:
    inputs:
      severity:
        description: 'スキャン重大度（CRITICAL,HIGH,MEDIUM,LOW）'
        required: false
        default: 'CRITICAL,HIGH'

jobs:
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 全履歴をフェッチ

      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # 詳細スキャンの実行
      - name: Run Trivy vulnerability scanner (Detailed)
        run: |
          # 手動実行時はinputsを使用、それ以外はデフォルト設定
          SEVERITY="${{ github.event.inputs.severity || 'CRITICAL,HIGH' }}"

          # 詳細な脆弱性情報を含むJSONレポートを生成
          trivy fs --format json -o trivy-results.json \
            --severity $SEVERITY \
            --ignore-unfixed=false \
            --vuln-type os,library \
            .

          # GitHubセキュリティダッシュボード用のSARIFレポートを生成
          trivy fs --format sarif -o trivy-sarif.json \
            --severity $SEVERITY \
            --ignore-unfixed=false \
            --vuln-type os,library \
            .

          # 読みやすいテーブル形式でターミナルに表示
          trivy fs --severity $SEVERITY \
            --ignore-unfixed=false \
            .

      # GitHub Security Alertsへの統合
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-sarif.json
          category: trivy

      # 脆弱性が検出された場合、PRにコメントを追加
      - name: Comment PR with vulnerability summary
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const trivyResults = JSON.parse(fs.readFileSync('trivy-results.json', 'utf8'));

            // 脆弱性の集計
            let criticalCount = 0;
            let highCount = 0;
            let mediumCount = 0;
            let lowCount = 0;

            trivyResults.Results.forEach(result => {
              if (result.Vulnerabilities) {
                result.Vulnerabilities.forEach(vuln => {
                  if (vuln.Severity === 'CRITICAL') criticalCount++;
                  if (vuln.Severity === 'HIGH') highCount++;
                  if (vuln.Severity === 'MEDIUM') mediumCount++;
                  if (vuln.Severity === 'LOW') lowCount++;
                });
              }
            });

            // 詳細な脆弱性情報の抽出（上位5件まで）
            let topVulns = [];
            let vulnCount = 0;

            for (const result of trivyResults.Results) {
              if (result.Vulnerabilities) {
                for (const vuln of result.Vulnerabilities) {
                  if (vuln.Severity === 'CRITICAL' || vuln.Severity === 'HIGH') {
                    if (vulnCount < 5) {
                      topVulns.push(`- **${vuln.PkgName}@${vuln.InstalledVersion}**: ${vuln.VulnerabilityID} (${vuln.Severity}) - ${vuln.Title}`);
                      vulnCount++;
                    }
                  }
                }
              }
            }

            // PRコメントの作成
            let comment = `## Trivy Security Scan 🔍\n\n`;
            comment += `**検出された脆弱性:**\n`;
            comment += `- Critical: ${criticalCount}\n`;
            comment += `- High: ${highCount}\n`;
            comment += `- Medium: ${mediumCount}\n`;
            comment += `- Low: ${lowCount}\n\n`;

            if (criticalCount > 0 || highCount > 0) {
              comment += `### 主要な脆弱性:\n${topVulns.join('\n')}\n\n`;
              comment += `⚠️ 重大な脆弱性が検出されました。マージ前に対応を検討してください。\n`;
            } else {
              comment += `✅ 重大な脆弱性は検出されませんでした。\n`;
            }

            comment += `\n詳細はGitHub Security Advisoriesを確認してください。`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # 成果物のアップロード
      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-report
          path: trivy-results.json

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Generate SBOM with CycloneDX
        uses: CycloneDX/gh-node-module-generatebom@master
        with:
          path: ./
          output: ./bom.xml

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: cyclonedx-sbom
          path: ./bom.xml

      - name: Verify SBOM file exists
        run: |
          if [ -f "./bom.xml" ]; then
            echo "SBOM file found: ./bom.xml"
            ls -la ./bom.xml
            head -10 ./bom.xml
          else
            echo "SBOM file not found!"
            exit 1
          fi

      - name: Analyze SBOM with Trivy
        run: |
          # Trivyを使ってSBOMファイルを解析
          trivy sbom ./bom.xml --format table --exit-code 0 || echo "SBOM analysis completed with warnings"

  security-report:
    name: Security Report Generation
    needs: [secrets-scan, dependency-scan, sbom-generation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Scan Date: $(date)" >> security-report.md
          echo "## Overview" >> security-report.md

          if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
            echo "- ✅ Secrets Scan: PASSED" >> security-report.md
          else
            echo "- ❌ Secrets Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "- ✅ Dependency Scan: PASSED" >> security-report.md
          else
            echo "- ❌ Dependency Scan: FAILED" >> security-report.md
          fi

          if [ "${{ needs.sbom-generation.result }}" == "success" ]; then
            echo "- ✅ SBOM Generation: PASSED" >> security-report.md
          else
            echo "- ❌ SBOM Generation: FAILED" >> security-report.md
          fi

          echo "## Recommendations" >> security-report.md
          echo "- Keep dependencies up to date" >> security-report.md
          echo "- Review SBOM for any deprecated packages" >> security-report.md
          echo "- Ensure proper secrets management" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: ./security-report.md
