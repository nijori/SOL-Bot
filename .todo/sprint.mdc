---
description: 
globs: 
alwaysApply: false
---
# SOL-Bot スプリント

### 本番稼働ロードマップと計画:

プロジェクトは現在、「ビルド／CI/CD／Docker」が動作する状態から、「24時間無停止のLIVE取引」へと向かうロードマップを進行中です。これには緊急停止機能、ロールバック機能、監視体制、アラート通知が含まれます。

#### フェーズ別タスクリスト

| フェーズ | 目的 | 完了条件 | 作業粒度 |
|---|---|---|---|
| P0 ― 安全ネット | "やらかさない"仕組みを先に敷く | LIVE 停止スイッチ が 10 秒で押せる | 2 d |
| P1 ― インフラ Hardening | 勝手に動き出せる CI/CD + Secrets | main push → EC2 → LIVE 再起動まで全自動 | 3 d |
| P2 ― 監視 & ログ可視化 | 失敗を 5 分以内に検知 | Grafana に「残高・PnL・Error Rate」3 枚 | 2 d |
| P3 ― リスクロジック実戦テスト | 24 h 無人で Paper-Trade | simulation モードでノーエラー通過 | 3 d |
| P4 ― Runbook & リハーサル | 障害対応ドキュメント & Drill 完了 | "EC2 停止→復旧" をペアで 1 回成功 | 1 d |
| P5 ― Go-Live | 実弾投入 & 監視運用開始 | 週次決算まで問題なし | - |

P0フェーズのタスクが完了次第、P1フェーズに進み、その後のスプリントでP2、P3、P4、P5と進んで行く予定です。

#### 本スプリント（P0→P1）の"Next-Action"指示:

| # | タスク | How-To / 受け入れ基準 |
|---|------|-------------------|
| 0-1 | 緊急停止フラグを実装 | 仕様：data/kill-switch.flag が存在したら即 process.exit(1) 試験：flag 生成→Bot が 30 sec 以内に停止 |
| 0-2 | ノン root SSH & sudo systemctl stop bot.service で同等の Kill を確認 | EC2 で 1 コマンド停止できること |
| 1-1 | Secrets を AWS SSM Parameter Store に移行 | ステップ ① aws ssm put-parameter --name /solbot/EXCHANGE_API_KEY --type SecureString … ② deploy.sh で aws ssm get-parameter 取得→.env 生成 ③ GitHub Actions に OIDC ロール を設定（最低: ssm:GetParameters） |
| 1-2 | GitHub Secrets から "鍵系" を削除 | EXCHANGE_SECRET_KEY, DISCORD_WEBHOOK_URL など = Parameter Store へ |
| 1-3 | deploy*.yml を CI→SSM 仕様 に修正 | 成功条件： main push で .env を含まずに EC2 起動し PnL 0 出力 |
| 1-4 | IAM 最小権限ポリシー を添付 | S3:PutObject, S3:GetObject, ssm:GetParameters のみ（Glacier は別ロール） |
| 1-5 | Data-Lifecycle Cron 実機テスト | EC2 で npm run data-lifecycle --run-now → S3 にファイル移行確認 |


### 🗓 2026-W11スプリント計画と優先順位:（Infra Pipeline Kick-off）
目的：ステージング EC2 を最小機能で回し、CI→EC2 のパイプラインを通す

0. [x] CICD-003: todo-lintスクリプトの修正
      - 📅 Due        : 2026-04-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ESモジュール環境のloggerインポート問題を修正。todoValidator.tsとtodo-lint.tsのlogger依存をconsole.logに変更。コードをコミット済み。

1. [x] SEC-004: 緊急停止フラグ機能の実装
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : data/kill-switch.flagが存在したら即process.exit(1)する機能を実装。アプリケーション起動時と定期実行時(5分ごと)にフラグをチェック。TradingEngineにも緊急停止機能を追加。テスト実装とドキュメント作成も完了。

2. [ ] INF-025: docker-compose Healthcheck 整備
      - 📅 Due        : 2026-06-28
      - 👤 Owner      : @nijor
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 75%
      - ✎ Notes      : solbot-dev / solbot-prod サービスに HTTP /api/status healthcheck を追加し、compose up で green になることを確認。実装完了、テスト環境での検証待ち。詳細な実装内容とテスト手順はREADME_INF_025.mdに記載しました。

3. [ ] INF-030: モジュール設定の修正 (CommonJS採用)
      - 📅 Due        : 2026-07-07
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-025
      - 🏷️  Label      : infra
      - 🩺 Health     : 🚑
      - 📊 Progress   : 0%
      - ✎ Notes      : ESM互換性問題を解決するために、より安定したCommonJSに戻す方針へ変更。これまでの修正を破棄し、CommonJS形式でパッケージ設定と実行環境を整える。ブランチ：fix/revert-to-commonjs

3.1 [x] INF-031: package.jsonのCommonJS設定への移行
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-030
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : package.jsonから"type": "module"を削除し、スクリプト設定を修正。モジュール指定を明示的にCJS形式に更新。ESM関連の設定と不要なスクリプトを削除。tsconfig.jsonもCommonJS設定に更新。

3.2 [ ] INF-032: コードベースをCommonJS形式に変換
      - 📅 Due        : 2026-07-06
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-031
      - 🏷️  Label      : refactor
      - 🩺 Health     : ⏳
      - 📊 Progress   : 80%
      - ✎ Notes      : moduleHelper実装で循環参照問題一部解決。logger, memoryMonitor, killSwitchChecker, orderUtilsなど重要クラスをリファクタリング。TypeScript型エラーは@ts-nocheck指定でビルド可能だが、今後最適化を継続。子タスクを作成し、より詳細に進捗を管理。変換完了までの残作業：
        1. 戦略ファイル（strategies/）: 6ファイル中全ファイル変換完了（INF-032-2完了）
        2. インジケーター（indicators/）: 全ファイル変換完了（INF-032-6完了）
        3. データ処理モジュール（data/）: 全8ファイル変換完了（INF-032-7完了）
        4. サービス（services/）: 全ファイル変換完了（INF-032-8完了）
        5. 型定義と循環参照問題: 一部対応済み、現在@ts-nocheck回避中（優先度:高）
        6. テストファイル（__tests__/）: 推定50+ファイル、未着手（優先度:低）

3.2.1 [x] INF-032-1: コアディレクトリのCommonJS変換
      - 📅 Due        : 2026-07-03
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-031
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : types.ts、orderManagementSystem.ts、TradingEngine.ts、backtestRunner.tsなどコアモジュールのCommonJS形式への変換完了。moduleHelperを使用して循環参照問題を一部解決。

3.2.2 [x] INF-032-2: 戦略ディレクトリのCommonJS変換
      - 📅 Due        : 2026-07-04
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-1
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 戦略ディレクトリ(strategies/)のすべてのファイルをCommonJS形式に変換完了。trendStrategy.ts、DonchianBreakoutStrategy.ts、meanRevertStrategy.ts、trendFollowStrategy.ts、rangeStrategy.tsの変換が完了。.js拡張子の削除とimport/export構文の変換を実施。module.exportsを使用してCommonJS形式でエクスポートするように変更。

3.2.6 [x] INF-032-6: インジケーターディレクトリのCommonJS変換
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-1
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : インジケーターディレクトリ(indicators/)のmarketState.tsとparabolicSAR.tsファイルをCommonJS形式に変換完了。主要なテクニカル指標のリファクタリングとtechnicalindicatorsライブラリの参照方法も修正。@ts-nocheck指示子を追加し、型定義問題は INF-032-4 タスクで対応予定。

3.2.7 [x] INF-032-7: データ処理モジュールのCommonJS変換
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-1
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : データ処理ディレクトリ(data/)の全8ファイル（marketDataFetcher.ts、parquetDataStore.ts、dataRepository.ts、MultiTimeframeDataFetcher.ts、fetchHourlyData.ts、fetchMultiTimeframeData.ts、generateSampleData.ts、runSampleTest.ts）をCommonJS形式に変換完了。型定義を削除し、import文をrequire文に変換。循環参照問題を解決するためのモジュール参照方法も修正。

3.2.8 [x] INF-032-8: サービスモジュールのCommonJS変換
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-1
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : サービスディレクトリ(services/)のすべてのファイルをCommonJS形式に変換完了。前回の作業でsecretManagerディレクトリの全9ファイル（AWSParameterStoreManager.ts、AWSSecretsManager.ts、EnvSecretManager.ts、FileSecretManager.ts、GCPSecretManager.ts、SecretManagerFactory.ts、SecretManagerInterface.ts、example.ts、index.ts）を変換。今回の確認で残りの主要サービスファイル（UnifiedOrderManager.ts、orderSizingService.ts、symbolInfoService.ts、exchangeService.ts）は既にCommonJS形式に変換されていることを確認。循環参照問題解決のためのmoduleHelper活用も完了。
      
3.2.3 [ ] INF-032-3: テストファイルのCommonJS変換
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-2, INF-032-6, INF-032-7, INF-032-8
      - 🏷️  Label      : refactor
      - 🩺 Health     : ⚠️
      - 📊 Progress   : 75%
      - ✎ Notes      : 多数のテストファイルをCommonJS形式に変換（trendFollowStrategy.test.js、meanRevertStrategy.test.js、rangeStrategy.test.js、orderSizingService.test.js、MultiTimeframeDataFetcher.test.js、UnifiedOrderManager.test.js、symbolInfoService.test.js、multiSymbolBacktest.test.js、parameterService.test.js）。残課題：1)「Types is not defined」エラーへの対応、2)モック設定の修正、3)依存関係の問題解決。次の作業として、types.tsの修正とテストファイル間の依存関係を整理し、テスト実行環境の構成を調整する必要あり。

3.2.4 [ ] INF-032-4: 型定義と循環参照問題の解決
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-1
      - 🏷️  Label      : refactor
      - 🩺 Health     : 🚑
      - 📊 Progress   : 40%
      - ✎ Notes      : @ts-nocheck指定を除去し、TypeScript型エラーを解消する。moduleHelperシステムを用いた循環参照問題の完全解決。types.tsの型定義とCommonJS形式の両立を実現。

3.2.5 [ ] INF-032-5: Docker環境でのユニットテスト
      - 📅 Due        : 2026-07-06
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : INF-032-3, INF-032-4, INF-032-6, INF-032-7, INF-032-8, INF-033
      - 🏷️  Label      : test
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : Docker環境でのユニットテスト実行とパス。docker-compose run solbot-test で全テストが成功することを確認。コンパイルエラーやランタイムエラーが発生しないことを検証。


4. [ ] INF-026: IaC でステージング EC2(t3.small) を起動
      - 📅 Due        : 2026-06-29
      - 👤 Owner      : @operator
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : Terraform (or AWS CLI script) で AMI + security-group + EIP + user-data(docker install) を自動化。タグ `Env=stg` を付与。

5. [ ] SEC-007: GitHub OIDC AssumeRole 作成
      - 📅 Due        : 2026-06-29
      - 👤 Owner      : @assistant
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : IAM Role `solbot-ci` を作成し、OIDC provider `token.actions.githubusercontent.com` からの `repo:sol-bot/*` を許可。最小権限ポリシーは EC2:start/stop, SSM:GetParameter, ECR:GetAuth 等。

6. [ ] INF-027: bot.service (systemd) ユニット実装
      - 📅 Due        : 2026-06-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : TimeoutStopSec=30/KillMode=mixed 設定を含むユニットを `/etc/systemd/system/bot.service` に配置し、手動 `sudo systemctl start bot` で起動確認。

7. [ ] CICD-005: deploy-stg.yml 作成 (GH Actions)
      - 📅 Due        : 2026-07-01
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-007, INF-027
      - 🏷️  Label      : cicd
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : `main` → `deploy-stg` ワークフロー。OIDC → scp env_runtime → systemctl reload。E2Eで healthcheck OK をアサート。

8. [ ] TST-085: "30 s Stop" CI インテグレーションテスト
      - 📅 Due        : 2026-07-02
      - 👤 Owner      : @assistant
      - 🔗 Depends-on : CICD-005
      - 🏷️  Label      : test
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : ワークフロー後段で `ssh systemctl stop bot.service` → 終了コードチェック、30 s 超過で fail させる。成功時は systemctl start で復旧し PnL=0 を確認。

### 🗓 2026-W12スプリント計画と優先順位:（Secrets & Smoke on Staging）
目的：Parameter Store 経由の Secrets 取得と "PnL=0 Smoke" を自動化。Blue/Green 準備を開始

1. [ ] SEC-008: SSM Parameter Store に `.env` SecureString 登録
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @operator
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : パス `/solbot/stg/env` `/solbot/prod/env` を作成。KMS default key 使用。GitHub Actions から `aws ssm get-parameters` で取得できることを確認。

2. [ ] INF-028: deploy.yml に SSM 取得ステップ追加
      - 📅 Due        : 2026-07-06
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-008
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : ステージングと本番でパス切替可能に。取得した env_runtime を `/opt/solbot/env.d/runtime` にアップロード。

3. [ ] INF-029: ParameterService の runtime-env 読み込み対応
      - 📅 Due        : 2026-07-07
      - 👤 Owner      : @nijor
      - 🏷️  Label      : refactor
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : ファイルパス指定があれば `.env` より優先してロード。ユニットテストを追加。


4. [ ] CICD-006: Blue/Green デプロイトグル追加
      - 📅 Due        : 2026-07-08
      - 👤 Owner      : @assistant
      - 🏷️  Label      : cicd
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : `deploy-prod.yml` で `HOST=$(BLUE_OR_GREEN)` を切り替えるジョブを追加。タグ `prod-blue`, `prod-green` を使い交互再起動。

5. [ ] OPS-009: Post-Deploy PnL=0 Smoke テスト
      - 📅 Due        : 2026-07-09
      - 👤 Owner      : @qa-team
      - 🔗 Depends-on : INF-029, CICD-006
      - 🏷️  Label      : ops
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : デプロイ後 `/api/account` で `dailyPnL===0` を確認。失敗時は `systemctl stop bot` ＋ GitHub status red に。

6. [ ] OBS-009: /metrics エンドポイント & Prometheus scrape
      - 📅 Due        : 2026-07-10
      - 👤 Owner      : @nijor
      - 🏷️  Label      : feat
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : prom-client で `orders_total`,`account_balance`,`order_latency_ms` を公開。prometheus.yml に stg target 追加し scrape 成功を確認。

7. [ ] DOC-008: Runbook & Pipeline 図 更新
      - 📅 Due        : 2026-07-11
      - 👤 Owner      : @nijor
      - 🏷️  Label      : doc
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : docs/runbook.md に "ステージング→本番 Blue/Green" 流れと rollback 手順を追加。図は Mermaid で作成。



### 🗓 2026-W13スプリント計画と優先順位:（P0→P1：安全ネット＆インフラHardening）
P0→P1フェーズのスプリント（本番稼働に向けた安全ネットとインフラHardening）。優先順位は以下の通り：

0. [x] CICD-003: todo-lintスクリプトの修正
      - 📅 Due        : 2026-04-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ESモジュール環境のloggerインポート問題を修正。todoValidator.tsとtodo-lint.tsのlogger依存をconsole.logに変更。コードをコミット済み。

1. [x] SEC-004: 緊急停止フラグ機能の実装
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : data/kill-switch.flagが存在したら即process.exit(1)する機能を実装。アプリケーション起動時と定期実行時(5分ごと)にフラグをチェック。TradingEngineにも緊急停止機能を追加。テスト実装とドキュメント作成も完了。

2. [ ] SEC-006: Secrets管理をAWS SSM Parameter Storeに移行
      - 📅 Due        : 2026-05-10
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : AWS SSM Parameter Storeを使用したシークレット管理の実装。EXCHANGE_API_KEY、EXCHANGE_SECRET_KEY、DISCORD_WEBHOOK_URLなどの機密情報をSecureStringとして保存。deploy.shスクリプトでSSMからパラメータを取得し.envファイルを生成する機能を実装。GitHub OIDC認証の設定も含む。

3. [ ] SEC-005: GitHub SecretsからAWS OIDCへの移行
      - 📅 Due        : 2026-05-15
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-006
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : GitHub ActionsからAWS OIDCを使用したロールベースの認証を設定。最小権限原則に基づきS3:PutObject、S3:GetObject、ssm:GetParametersのみを許可するIAMポリシーを作成。GitHub SecretsからAPIキーなどの機密情報を削除し、代わりにSSM Parameter Storeから取得するようCI/CDを修正。

4. [ ] INF-024: deploy.ymlをCI→SSM仕様に修正
      - 📅 Due        : 2026-05-20
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-005
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : deploy.ymlワークフローを修正し、直接.envファイルをEC2に配置せず、SSM Parameter Storeから取得するように変更。main pushでEC2起動し、PnL出力が0になることを確認。OIDC認証とSSM Parameter Store取得のエラーハンドリングも実装。

5. [ ] DAT-015: Data-Lifecycle Cron実機テスト
      - 📅 Due        : 2026-05-25
      - 👤 Owner      : @nijor
      - 🏷️  Label      : ops
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : EC2環境でData-Lifecycleスクリプト（npm run data-lifecycle --run-now）を実行し、古いファイルがS3に正しく移行されることを確認。IAMインスタンスプロファイルの検証、S3バケットへのアクセス権限確認、cronジョブの設定と動作確認も実施。



## 🗓 2026-W14スプリント候補（P1→P2：監視システム整備）

### 監視システムの整備方針:

本スプリントはP2フェーズ「監視&ログ可視化」に対応しており、Grafanaダッシュボードに「残高・PnL・Error Rate」の3つの主要メトリクスを実装することを目指します。以下の成果物を予定しています：

1. **メトリクス収集基盤**:
   - Bot側メトリクスエンドポイント実装
   - Prometheus設定の調整
   - Grafanaデータソースの自動プロビジョニング

2. **主要ダッシュボード**:
   - PnL & 残高ダッシュボード
   - （次回スプリントで）Bot健康状態ダッシュボード
   - （次回スプリントで）インフラ資源ダッシュボード

3. **アラート設定**:
   - （次回スプリントで）アラートルールYAMLの作成
   - （次回スプリントで）Alertmanager Discord Route拡張

##### 成功基準:
- メトリクスエンドポイントからPrometheusでデータ収集可能
- Grafanaダッシュボードで残高とPnLの可視化
- docker-compose経由での自動プロビジョニング

次回スプリントではアラート設定と残りのダッシュボードを実装する予定です。P2フェーズ完了後はP3「リスクロジック実戦テスト」へと進みます。



























































































































































