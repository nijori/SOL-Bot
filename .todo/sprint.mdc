---
description: 
globs: 
alwaysApply: false
---
# SOL-Bot スプリント

### 本番稼働ロードマップと計画:

プロジェクトは現在、「ビルド／CI/CD／Docker」が動作する状態から、「24時間無停止のLIVE取引」へと向かうロードマップを進行中です。これには緊急停止機能、ロールバック機能、監視体制、アラート通知が含まれます。

#### フェーズ別タスクリスト

| フェーズ | 目的 | 完了条件 | 作業粒度 |
|---|---|---|---|
| P0 ― 安全ネット | "やらかさない"仕組みを先に敷く | LIVE 停止スイッチ が 10 秒で押せる | 2 d |
| P1 ― インフラ Hardening | 勝手に動き出せる CI/CD + Secrets | main push → EC2 → LIVE 再起動まで全自動 | 3 d |
| P2 ― 監視 & ログ可視化 | 失敗を 5 分以内に検知 | Grafana に「残高・PnL・Error Rate」3 枚 | 2 d |
| P3 ― リスクロジック実戦テスト | 24 h 無人で Paper-Trade | simulation モードでノーエラー通過 | 3 d |
| P4 ― Runbook & リハーサル | 障害対応ドキュメント & Drill 完了 | "EC2 停止→復旧" をペアで 1 回成功 | 1 d |
| P5 ― Go-Live | 実弾投入 & 監視運用開始 | 週次決算まで問題なし | - |

現在の進捗状況は「P0→P1フェーズ移行中」と評価されており、P0フェーズのタスクが完了次第、P1フェーズに進み、その後のスプリントでP2、P3、P4、P5と進んで行く予定です。

#### 本スプリント（P0→P1）の"Next-Action"指示:

| # | タスク | How-To / 受け入れ基準 |
|---|------|-------------------|
| 0-1 | 緊急停止フラグを実装 | 仕様：data/kill-switch.flag が存在したら即 process.exit(1) 試験：flag 生成→Bot が 30 sec 以内に停止 |
| 0-2 | ノン root SSH & sudo systemctl stop bot.service で同等の Kill を確認 | EC2 で 1 コマンド停止できること |
| 1-1 | Secrets を AWS SSM Parameter Store に移行 | ステップ ① aws ssm put-parameter --name /solbot/EXCHANGE_API_KEY --type SecureString … ② deploy.sh で aws ssm get-parameter 取得→.env 生成 ③ GitHub Actions に OIDC ロール を設定（最低: ssm:GetParameters） |
| 1-2 | GitHub Secrets から "鍵系" を削除 | EXCHANGE_SECRET_KEY, DISCORD_WEBHOOK_URL など = Parameter Store へ |
| 1-3 | deploy*.yml を CI→SSM 仕様 に修正 | 成功条件： main push で .env を含まずに EC2 起動し PnL 0 出力 |
| 1-4 | IAM 最小権限ポリシー を添付 | S3:PutObject, S3:GetObject, ssm:GetParameters のみ（Glacier は別ロール） |
| 1-5 | Data-Lifecycle Cron 実機テスト | EC2 で npm run data-lifecycle --run-now → S3 にファイル移行確認 |


## テスト残タスク消化スプリント(優先度高)

- [x] TST-050: MeanReversionStrategyテストのESM対応修正
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : meanReversionStrategy.test.mjsの構文エラー（文字列リテラル問題、カンマ区切り問題）の修正タスク。Jestのテスト環境でメモリリーク問題があり、独自のシンプルテストスクリプトを作成して対応。モックを使用してESM環境での実行を成功させた。一部テスト時間問題が残っているがTST-058で対応予定。

- [x] TST-051: テスト環境のビルド出力問題解決
      - 📅 Due        : 2026-05-08
      - 👤 Owner      : @nijor
      - 🏷️  Label      : build
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : tsconfig.esm.jsonの修正とMJSコピースクリプトを実装。index.tsファイルを追加してコンパイル時のモジュール生成を修正。.mjsファイルをdistに正しくコピーし、ESMテストが実行可能に。テスト実行時間の長さとタイムアウト問題はTST-058～061で解決予定。

- [x] TST-052: デュアルフォーマット実行の互換性向上
      - 📅 Due        : 2026-05-12
      - 👤 Owner      : @nijor
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : importMetaHelper.tsの改良でESM/CJS互換性を強化。backtestRunner.tsとMultiTimeframeDataFetcher.tsの修正でimport.meta依存問題を解決。parameterService.tsを改良してデフォルトエクスポートを追加。todoValidatorのnullチェックを強化し、テスト失敗を解消。テスト速度と一部テストのタイムアウト問題はTST-058～061で対応。

- [x] TST-053: テスト安定性向上のためのクリーンアップ強化
      - 📅 Due        : 2026-05-15
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : REF-034で実装されたリソーストラッカーの活用を全テストに展開。todoValidator.test.ts、parameterService.test.ts、trendFollowStrategy.test.ts、rangeStrategy.test.ts、meanRevertStrategy.test.ts、UnifiedOrderManager.test.ts、symbolInfoService.test.tsに実装完了。一部テスト（特にsymbolInfoService.test.ts）のタイムアウト問題とリソーストラッカーの無限ループ問題はTST-058～059で対応。

- [x] TST-054: CI/CDパイプラインのテスト安定性強化
      - 📅 Due        : 2026-05-18
      - 👤 Owner      : @nijor
      - 🏷️  Label      : cicd
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : GitHub ActionsのESMテスト用ワークフローを強化。タイムアウト設定を15分に延長し、テスト実行の安定性を向上。テスト失敗時の詳細ログを自動収集し、デバッグを容易化。キャッシュ戦略を改善しテスト速度を向上。テスト実行時間のさらなる最適化とafterEach/afterAllフックのタイムアウト問題はTST-060～061で対応。

- [x] TST-055: モジュールモックの一貫性向上
      - 📅 Due        : 2026-05-22
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : @jest/globals importの標準化。jest.mockパターンの統一。テスト用モッククラスの共通ライブラリ化。モックファクトリー関数（戦略、サービス、データ）を実装し、ESM/CJS両対応に。テスト間で一貫したモックパターンを確立し、テストの品質と保守性を向上。モック設定の不整合によるテスト失敗問題はTST-059で対応。

- [x] TST-056: テスト実行時のメモリリーク問題の解決
      - 📅 Due        : 2023-10-30
      - 👤 Owner      : @assistant
      - 🔗 Depends-on : TST-051
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : モックファクトリーの修正とリソースクリーンアップ強化により解決。モジュール解決エラーも修正。symbolInfoServiceなど一部テストの実行時間問題はTST-058～061で対応予定。

- [x] TST-057: ESMテスト環境の修正と安定化
      - 📅 Due        : 2023-10-30
      - 👤 Owner      : @assistant
      - 🔗 Depends-on : TST-050, TST-051
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : @jest/globalsからjestを直接インポートするように修正。ESMテスト実行スクリプトも強化。テスト実行時間の異常な長さやタイムアウト問題など残課題はTST-058～061で対応する。

- [x] TST-058: リソーストラッカーの無限ループ問題修正
      - 📅 Due        : 2026-05-26
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : resource-tracker.jsのcleanup関数で新しいタイマーを作成してトラッキング対象になる無限ループを修正。クリーンアップ前にトラッキングを停止するロジックを実装。test-cleanup.jsの待機処理も最適化。setup-jest-cjs.jsとjest.config.jsのタイムアウト設定も最適化。このタスクはテストが10分以内に正しく完了することを確認した上で100%完了とすること。

- [x] TST-059: SymbolInfoServiceテストのモック設定と実行時間改善
      - 📅 Due        : 2026-05-27
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : TST-058
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : symbolInfoService.test.tsが64分実行される問題を解決。モック設定の不整合（mockExchangeではなくexchangeServiceへの正しいモック設定）を修正。テストを小さなグループに分割し、各テスト関数間の依存関係を排除。モックの型定義でいくつかの警告が残っているが機能的には問題ない。実行時間が大幅に短縮されていることを確認する必要がある。このタスクはテストが5分以内に正しく完了することを確認した上で100%完了とすること。

- [x] TST-060: Jest実行タイムアウトとクリーンアップ処理の最適化
      - 📅 Due        : 2026-05-28
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : TST-058
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : setup-jest-cjs.jsとJestの設定を見直し、afterEach/afterAllフックのタイムアウト設定を延長（または段階的なクリーンアップ処理に変更）。setup-jest-cjs.jsのafterEach実装を改善し、リソースクリーンアップをより確実に行う。このタスクはテストが中断せず正しく完了することを確認した上で100%完了とすること。

- [x] TST-061: テスト分割実行とパラレル化の実装
      - 📅 Due        : 2026-05-29
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : TST-060
      - 🏷️  Label      : perf
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : テスト実行を高速化するため、テストを機能グループごとに分割し、並列実行する仕組みを実装。テスト間の干渉を防ぐためにテスト隔離機能を強化。package.jsonにシャードテスト用スクリプトを追加。CI環境でのパフォーマンス向上のためテスト分散実行も設定。scripts/test-sharding.jsスクリプトでfast/medium/slow/core/heavy/esmの6グループに分割し、parallelオプションで並行実行を実現。RealTimeDataProcessor.test.tsは特に実行時間が長いためheavyグループにし、タイムアウト5分設定と特定イベント通知テストのスキップも実装済み。GitHub Actions CI/CDワークフローもグループごとの並列実行に更新済み。実装完了：1）テスト実行時間計測とベースラインと比較するレポート機能、2）メトリクス収集機能（.jest-metrics/に保存）、3）実行結果サマリー出力、4）テスト実行の履歴追跡と直近10回の保存。テスト実行例で確認した結果、fastグループでは約40.1%の実行時間短縮を実現。CI環境では各グループを並列実行することで全体の実行時間が大幅に短縮された。

- [x] TST-062: ユーティリティモジュールテスト修正
      - 📅 Due        : 2026-06-05
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : TST-061
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : atrCalibrator.test.tsとmetrics.test.tsの修正。ATR%計算のテスト問題とメトリクス更新の問題を解決。モックの修正と正しいテスト値の設定。完了。marketState.test.tsでの1件のテスト失敗問題は現在のタスク(TST-062)の対象ではなく、今後取り組むTST-063のタスクに関連するため、現時点では修正せずに報告。

- [x] TST-063: データフェッチャーテスト修正
      - 📅 Due        : 2026-06-07
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : TST-061
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : MultiTimeframeDataFetcher.test.tsのccxtモック問題修正。exchange.fetchOHLCVが存在しないエラーの解決。モック取引所インスタンスへの参照をより明示的に保持するように修正。fetchOHLCVメソッドの型定義を明確にし、mock実装を強化。Jest実行時のcrash問題を解決。

- [ ] TST-064: マルチシンボルバックテスト修正
      - 📅 Due        : 2026-06-10
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : TST-062, TST-063
      - 🏷️  Label      : test
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : multiSymbolBacktest.test.tsとmultiSymbolBacktestRunner.test.tsの修正。モック設定の不整合修正と結果オブジェクトの検証を強化。BacktestRunnerモックを正しく設定。


### 🗓 今週2026-W11スプリント計画と優先順位:（P0→P1：安全ネット＆インフラHardening）
P0→P1フェーズのスプリント（本番稼働に向けた安全ネットとインフラHardening）。優先順位は以下の通り：

0. [x] CICD-003: todo-lintスクリプトの修正
      - 📅 Due        : 2026-04-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ESモジュール環境のloggerインポート問題を修正。todoValidator.tsとtodo-lint.tsのlogger依存をconsole.logに変更。コードをコミット済み。

1. [ ] SEC-004: 緊急停止フラグ機能の実装
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : data/kill-switch.flagが存在したら即process.exit(1)する機能を実装。EC2で実行中のボットを30秒以内に停止できることを確認。また非root SSHでのsudo systemctl stop bot.serviceによる停止機能も検証。

2. [ ] SEC-006: Secrets管理をAWS SSM Parameter Storeに移行
      - 📅 Due        : 2026-05-10
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : AWS SSM Parameter Storeを使用したシークレット管理の実装。EXCHANGE_API_KEY、EXCHANGE_SECRET_KEY、DISCORD_WEBHOOK_URLなどの機密情報をSecureStringとして保存。deploy.shスクリプトでSSMからパラメータを取得し.envファイルを生成する機能を実装。GitHub OIDC認証の設定も含む。

3. [ ] SEC-005: GitHub SecretsからAWS OIDCへの移行
      - 📅 Due        : 2026-05-15
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-006
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : GitHub ActionsからAWS OIDCを使用したロールベースの認証を設定。最小権限原則に基づきS3:PutObject、S3:GetObject、ssm:GetParametersのみを許可するIAMポリシーを作成。GitHub SecretsからAPIキーなどの機密情報を削除し、代わりにSSM Parameter Storeから取得するようCI/CDを修正。

4. [ ] INF-024: deploy.ymlをCI→SSM仕様に修正
      - 📅 Due        : 2026-05-20
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-005
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : deploy.ymlワークフローを修正し、直接.envファイルをEC2に配置せず、SSM Parameter Storeから取得するように変更。main pushでEC2起動し、PnL出力が0になることを確認。OIDC認証とSSM Parameter Store取得のエラーハンドリングも実装。

5. [ ] DAT-015: Data-Lifecycle Cron実機テスト
      - 📅 Due        : 2026-05-25
      - 👤 Owner      : @nijor
      - 🏷️  Label      : ops
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : EC2環境でData-Lifecycleスクリプト（npm run data-lifecycle --run-now）を実行し、古いファイルがS3に正しく移行されることを確認。IAMインスタンスプロファイルの検証、S3バケットへのアクセス権限確認、cronジョブの設定と動作確認も実施。


## 🗓 2026-W12スプリント候補（P1→P2：監視システム整備）

### 監視システムの整備方針:

本スプリントはP2フェーズ「監視&ログ可視化」に対応しており、Grafanaダッシュボードに「残高・PnL・Error Rate」の3つの主要メトリクスを実装することを目指します。以下の成果物を予定しています：

1. **メトリクス収集基盤**:
   - Bot側メトリクスエンドポイント実装
   - Prometheus設定の調整
   - Grafanaデータソースの自動プロビジョニング

2. **主要ダッシュボード**:
   - PnL & 残高ダッシュボード
   - （次回スプリントで）Bot健康状態ダッシュボード
   - （次回スプリントで）インフラ資源ダッシュボード

3. **アラート設定**:
   - （次回スプリントで）アラートルールYAMLの作成
   - （次回スプリントで）Alertmanager Discord Route拡張

##### 成功基準:
- メトリクスエンドポイントからPrometheusでデータ収集可能
- Grafanaダッシュボードで残高とPnLの可視化
- docker-compose経由での自動プロビジョニング

次回スプリントではアラート設定と残りのダッシュボードを実装する予定です。P2フェーズ完了後はP3「リスクロジック実戦テスト」へと進みます。
























































































