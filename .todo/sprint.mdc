---
description: 
globs: 
alwaysApply: false
---
# SOL-Bot スプリント

### 本番稼働ロードマップと計画:

プロジェクトは現在、「ビルド／CI/CD／Docker」が動作する状態から、「24時間無停止のLIVE取引」へと向かうロードマップを進行中です。これには緊急停止機能、ロールバック機能、監視体制、アラート通知が含まれます。

#### フェーズ別タスクリスト

| フェーズ | 目的 | 完了条件 | 作業粒度 |
|---|---|---|---|
| P0 ― 安全ネット | "やらかさない"仕組みを先に敷く | LIVE 停止スイッチ が 10 秒で押せる | 2 d |
| P1 ― インフラ Hardening | 勝手に動き出せる CI/CD + Secrets | main push → EC2 → LIVE 再起動まで全自動 | 3 d |
| P2 ― 監視 & ログ可視化 | 失敗を 5 分以内に検知 | Grafana に「残高・PnL・Error Rate」3 枚 | 2 d |
| P3 ― リスクロジック実戦テスト | 24 h 無人で Paper-Trade | simulation モードでノーエラー通過 | 3 d |
| P4 ― Runbook & リハーサル | 障害対応ドキュメント & Drill 完了 | "EC2 停止→復旧" をペアで 1 回成功 | 1 d |
| P5 ― Go-Live | 実弾投入 & 監視運用開始 | 週次決算まで問題なし | - |

P0フェーズのタスクが完了次第、P1フェーズに進み、その後のスプリントでP2、P3、P4、P5と進んで行く予定です。

#### 本スプリント（P0→P1）の"Next-Action"指示:

| # | タスク | How-To / 受け入れ基準 |
|---|------|-------------------|
| 0-1 | 緊急停止フラグを実装 | 仕様：data/kill-switch.flag が存在したら即 process.exit(1) 試験：flag 生成→Bot が 30 sec 以内に停止 |
| 0-2 | ノン root SSH & sudo systemctl stop bot.service で同等の Kill を確認 | EC2 で 1 コマンド停止できること |
| 1-1 | Secrets を AWS SSM Parameter Store に移行 | ステップ ① aws ssm put-parameter --name /solbot/EXCHANGE_API_KEY --type SecureString … ② deploy.sh で aws ssm get-parameter 取得→.env 生成 ③ GitHub Actions に OIDC ロール を設定（最低: ssm:GetParameters） |
| 1-2 | GitHub Secrets から "鍵系" を削除 | EXCHANGE_SECRET_KEY, DISCORD_WEBHOOK_URL など = Parameter Store へ |
| 1-3 | deploy*.yml を CI→SSM 仕様 に修正 | 成功条件： main push で .env を含まずに EC2 起動し PnL 0 出力 |
| 1-4 | IAM 最小権限ポリシー を添付 | S3:PutObject, S3:GetObject, ssm:GetParameters のみ（Glacier は別ロール） |
| 1-5 | Data-Lifecycle Cron 実機テスト | EC2 で npm run data-lifecycle --run-now → S3 にファイル移行確認 |


### 🗓 2026-W11スプリント計画と優先順位:（Infra Pipeline Kick-off）
目的：ステージング EC2 を最小機能で回し、CI→EC2 のパイプラインを通す

0. [x] CICD-003: todo-lintスクリプトの修正
      - 📅 Due        : 2026-04-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ESモジュール環境のloggerインポート問題を修正。todoValidator.tsとtodo-lint.tsのlogger依存をconsole.logに変更。コードをコミット済み。

1. [x] SEC-004: 緊急停止フラグ機能の実装
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : data/kill-switch.flagが存在したら即process.exit(1)する機能を実装。アプリケーション起動時と定期実行時(5分ごと)にフラグをチェック。TradingEngineにも緊急停止機能を追加。テスト実装とドキュメント作成も完了。

2. [x] INF-025: docker-compose Healthcheck 整備
      - 📅 Due        : 2026-06-28
      - 👤 Owner      : @nijor
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！ヘルスチェック機能の実装と検証が完了。docker-compose.ymlにsolbot-dev/solbot-prod両方のヘルスチェック設定を追加（interval: 30s, timeout: 10s, retries: 3）。/api/statusエンドポイントを使用したコンテナ健全性監視を実現。Docker環境でのテスト完了、コンテナが正常に「healthy」状態になることを確認。REF-032のESモジュール問題解決により、アプリケーションが正常起動し、ヘルスチェックエンドポイントが200 OKで応答することを検証済み。

3. [x] INF-026: IaC でステージング EC2(t3.small) を起動
      - 📅 Due        : 2026-06-29
      - 👤 Owner      : @operator
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : Terraform実行完了。EC2インスタンス: i-0dbe2af5c7b01181e, パブリックIP: 13.158.58.241, DNS: ec2-35-78-71-59.ap-northeast-1.compute.amazonaws.com。Docker、Node.js、必要なディレクトリ構造が自動セットアップ済み。

4. [x] REF-032: Docker環境でのESモジュール起動問題修正
      - 📅 Due        : 2026-06-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！Docker環境でのESモジュール起動問題を完全解決。package.jsonのdevスクリプト修正、tsconfig.dev.json作成、Dockerfileの開発環境ターゲット追加、atrUtils.ts/cliParser.tsのCommonJS変換、メトリクスサービス呼び出し修正を実施。アプリケーションが正常起動し、/api/statusエンドポイントが200 OKで応答することを確認。

4.1. [x] REF-033: 戦略モジュールパス修正
      - 📅 Due        : 2026-06-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！TradingEngineでrangeStrategy/meanRevertStrategy/DonchianBreakoutStrategyのrequire文から.js拡張子を削除。「Cannot find module '../strategies/rangeStrategy.js'」エラーを解消し、レンジ戦略が正常実行されることを確認。CommonJS環境での戦略モジュール読み込み問題を完全解決。

5. [x] SEC-007: GitHub OIDC AssumeRole 作成
      - 📅 Due        : 2026-06-29
      - 👤 Owner      : @assistant
      - 🏷️  Label      : security
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！IAM Role `solbot-ci` (arn:aws:iam::475538532274:role/solbot-ci) を作成し、OIDC provider `token.actions.githubusercontent.com` からの `repo:nijor/SOL_bot:*` を許可。最小権限ポリシー（EC2:start/stop, SSM:GetParameter, ECR:GetAuth, S3:GetObject/PutObject）を設定。GitHub ActionsからAWS OIDCを使用したロールベース認証が利用可能。AWS設定情報はaws-oidc-setup.mdに記載

6. [x] INF-027: bot.service (systemd) ユニット実装
      - 📅 Due        : 2026-06-30
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : REF-032
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！systemdサービスファイル (infra/systemd/bot.service) 作成。TimeoutStopSec=30/KillMode=mixed設定、セキュリティ強化設定 (NoNewPrivileges, PrivateTmp等) 実装。インストールスクリプト (scripts/install-systemd-service.sh) とデプロイスクリプト (scripts/deploy-to-systemd.sh) 作成。systemdデプロイメントドキュメント (docs/systemd-deployment.md) 作成。本番環境での手動テストが必要。

7. [x] CICD-005: deploy-stg.yml 作成 (GH Actions)
      - 📅 Due        : 2026-07-01
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-007, INF-027
      - 🏷️  Label      : cicd
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ✅完了！GitHub Actionsワークフロー作成・デプロイ・ヘルスチェック全て成功。Amazon Linux 2023 + Node.js 18環境、TypeScriptビルド・systemdサービス起動・ヘルスチェックエンドポイント(/api/status)確認完了。here-document構文エラー修正、systemdサービスファイル強制更新、ExecStartパス(dist/index.js)修正を実施。Discord通知設定済み。ステージング環境での完全なCI/CDパイプライン確立完了。

8. [x] TST-085: "30 s Stop" CI インテグレーションテスト
      - 📅 Due        : 2026-07-02
      - 👤 Owner      : @assistant
      - 🔗 Depends-on : CICD-005
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ✅完了！deploy-stg.ymlに30秒停止統合テストジョブ「thirty-second-stop-test」を追加実装完了。systemctl stop bot.serviceが30秒以内に完了することを検証、サービス復旧テスト、ヘルスチェック(/api/status)による動作確認が成功。タイムアウト保護、エラーハンドリング、Discord通知完備。GitHub Actions構文エラー修正（secrets→env参照）も実施。全ジョブが成功してCI/CDパイプラインでの30秒停止テスト完全動作確認済み。

9. [x] CICD-007: deploy-prod.ymlの更新・SSM対応
      - 📅 Due        : 2026-07-03
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-008, INF-031
      - 🏷️  Label      : cicd
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ✅完了！deploy-prod.yml更新・SSM対応・1台構成対応・TST-085統合テスト追加・Discord通知修正すべて完了。SSH接続エラー修正済み（STG_SSH_KEY使用、1台構成で/opt/solbot-prodディレクトリ分離、ポート3001）。ワークフロー実行成功、Discord通知も正常動作確認済み。本番環境デプロイパイプライン完全確立。

9.1. [x] INF-031: 1台構成用AWS設定修正
      - 📅 Due        : 2026-07-03
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : -
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ✅完了！1台構成用AWS設定修正完了。1) Security Group: ポート3001追加（Production用）✅、2) IAM Role汎用化（solbot-shared-role）✅、3) SSM Parameter Store権限拡張（/solbot/*）✅、4) Terraform apply実行・AWS設定反映完了✅。1台構成でStaging/Production両環境運用可能。

10. [ ] CICD-008: ci.ymlワークフローの整理・重複排除
      - 📅 Due        : 2026-07-04
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : CICD-007
      - 🏷️  Label      : cicd
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : ci.ymlとdeploy-stg.ymlの機能重複を整理。ci.ymlはテスト・ビルドのみ、デプロイは専用ワークフローに分離。古いPM2/SSH設定削除。実際にワークフローが成功することを確認してからタスク完了とする。

11. [ ] CICD-009: 重複ワークフローの削除・統合
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : cicd
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : trivy-dependency-scan.ymlをsecurity-scan.ymlに統合済みのため削除。不要なワークフローファイルの整理とREADME更新。実際にワークフローが成功することを確認してからタスク完了とする。

### 🗓 2026-W12スプリント計画と優先順位:（Secrets & Smoke on Staging）
目的：Parameter Store 経由の Secrets 取得と "PnL=0 Smoke" を自動化。Blue/Green 準備を開始

1. [x] SEC-008: SSM Parameter Store に `.env` SecureString 登録
      - 📅 Due        : 2026-07-05
      - 👤 Owner      : @operator
      - 🏷️  Label      : security
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ✅完了！BybitのAPIキー(ステージング・本番)作成完了。SSM Parameter Store設定完了：`/solbot/stg/env`と`/solbot/prod/env`をSecureString形式で作成。BYBIT_API_KEY、BYBIT_SECRET_KEY、NODE_ENV、LOG_LEVEL等を設定。KMS暗号化(aws/ssm)適用済み。Binance、Discord Webhook等は将来追加予定。次はINF-028でGitHub ActionsからSSM取得実装。

2. [x] INF-028: deploy.yml に SSM 取得ステップ追加
      - 📅 Due        : 2026-07-06
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-008
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ✅完了！deploy-stg.ymlとdeploy-prod.ymlにSSM Parameter Store統合完了。`/solbot/stg/env`と`/solbot/prod/env`からSecureString取得、`/opt/solbot/.env`と`/opt/solbot/env.d/runtime`に配置。AWS OIDC認証で自動化、GitHub Secrets依存を削減。deploy-prod.ymlも最新構成に更新（appleboy/ssh-action v1.0.3、AWS OIDC、systemd管理）。全237テスト通過、GitHubプッシュ完了。

3. [ ] INF-029: ParameterService の runtime-env 読み込み対応
      - 📅 Due        : 2026-07-07
      - 👤 Owner      : @nijor
      - 🏷️  Label      : refactor
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : ファイルパス指定があれば `.env` より優先してロード。ユニットテストを追加。


4. [ ] CICD-006: Blue/Green デプロイトグル追加
      - 📅 Due        : 2026-07-08
      - 👤 Owner      : @assistant
      - 🏷️  Label      : cicd
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : `deploy-prod.yml` で `HOST=$(BLUE_OR_GREEN)` を切り替えるジョブを追加。タグ `prod-blue`, `prod-green` を使い交互再起動。

5. [ ] OPS-009: Post-Deploy PnL=0 Smoke テスト
      - 📅 Due        : 2026-07-09
      - 👤 Owner      : @qa-team
      - 🔗 Depends-on : INF-029, CICD-006
      - 🏷️  Label      : ops
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : デプロイ後 `/api/account` で `dailyPnL===0` を確認。失敗時は `systemctl stop bot` ＋ GitHub status red に。

6. [ ] OBS-009: /metrics エンドポイント & Prometheus scrape
      - 📅 Due        : 2026-07-10
      - 👤 Owner      : @nijor
      - 🏷️  Label      : feat
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : prom-client で `orders_total`,`account_balance`,`order_latency_ms` を公開。prometheus.yml に stg target 追加し scrape 成功を確認。

7. [ ] DOC-008: Runbook & Pipeline 図 更新
      - 📅 Due        : 2026-07-11
      - 👤 Owner      : @nijor
      - 🏷️  Label      : doc
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : docs/runbook.md に "ステージング→本番 Blue/Green" 流れと rollback 手順を追加。図は Mermaid で作成。

8. [x] REF-034: TypeScript/Jest統合エラー修正 - multiSymbol系ファイル
      - 📅 Due        : 2026-07-12
      - 👤 Owner      : @nijor
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了。Jest: 254 tests passed, 0 failed。TypeScript: multiSymbol関連ファイル全てエラー0。multiSymbolTradingEngine.ts/multiSymbolBacktestRunner.ts/multiSymbolTypes.ts/tradingEngineTypes.tsをCommonJS化、インポート/エクスポート修正。ファイル単位完全修正アプローチ成功。詳細はtypescript-jest-integration-plan.mdを参照。

9. [x] REF-035: TypeScript/Jest統合エラー修正 - core系ファイル
      - 📅 Due        : 2026-07-13
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : REF-034
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了。core系ファイル（orderManagementSystem.ts, backtestRunner.ts, tradingEngine.ts）のTypeScript修正完了（0エラー）。multiSymbol系テストファイル5個を一時無効化してJest実行成功（23 suites, 209 tests passed）。ネイティブスタックトレースエラーはmultiSymbol系ファイルの問題と特定。


10. [x] REF-036: TypeScript/Jest統合エラー修正 - multiSymbol系テストファイル修正
      - 📅 Due        : 2026-07-14
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : REF-035
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！全multiSymbol系テストファイル(3/3)の修正とネイティブスタックトレースエラー解決完了。Jest: 21 tests passed (multiSymbolTradingEngine.test.js、multiSymbolBacktestRunner.test.js、multiSymbolBacktest.test.js、multiExchangeIntegration.test.js)。DuckDBモック安定化、correlationMatrix初期化、calculatePearsonCorrelation関数実装、tradingEngine.tsのTypeScript構文CommonJS化（private/public削除、型アノテーション削除）を実施。Jest設定のtestPathIgnorePatterns更新でmultiSymbol系ファイルを有効化。

11. [x] REF-037: TypeScript/Jest統合エラー修正 - utils/types系ファイル修正
      - 📅 Due        : 2026-07-15
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : REF-036
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！utils系、types系、scripts系の残存ESモジュール文をCommonJS化完了。重複宣言エラー解消、型定義の統一、optimizer系も含めて修正。TypeScriptビルドとJestテストの両方で完全成功達成。詳細はtypescript-jest-integration-plan.mdを参照。

12. [x] REF-038: TypeScript/Jest統合エラー修正 - 最終調整と@ts-nocheck削除
      - 📅 Due        : 2026-07-16
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : REF-037
      - 🏷️  Label      : refactor
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : 完了！暗黙的any型エラー修正、@ts-nocheckの段階的削除完了。Jest: 237/237 tests passed (100%成功) && TypeScript build: 0エラー (完全成功) を達成。933エラー→0エラーの完全解決達成。TypeScriptビルドとJestテスト統合エラー修正プロジェクト完全完了。詳細はtypescript-jest-integration-plan.mdを参照。

13. [ ] INF-030: S3 Remote Backend for Terraform State
      - 📅 Due        : 2026-07-15
      - 👤 Owner      : @nijor
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : Terraformステート管理をS3リモートバックエンドに移行。S3バケット作成、DynamoDBテーブル作成（ロック用）、backend.tfファイル作成、既存ステートの移行。チーム開発でのステート競合問題を解決。



### 🗓 2026-W13スプリント計画と優先順位:（P0→P1：安全ネット＆インフラHardening）
P0→P1フェーズのスプリント（本番稼働に向けた安全ネットとインフラHardening）。優先順位は以下の通り：

0. [x] CICD-003: todo-lintスクリプトの修正
      - 📅 Due        : 2026-04-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ESモジュール環境のloggerインポート問題を修正。todoValidator.tsとtodo-lint.tsのlogger依存をconsole.logに変更。コードをコミット済み。

1. [x] SEC-004: 緊急停止フラグ機能の実装
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : data/kill-switch.flagが存在したら即process.exit(1)する機能を実装。アプリケーション起動時と定期実行時(5分ごと)にフラグをチェック。TradingEngineにも緊急停止機能を追加。テスト実装とドキュメント作成も完了。

2. [ ] SEC-006: Secrets管理をAWS SSM Parameter Storeに移行
      - 📅 Due        : 2026-05-10
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : AWS SSM Parameter Storeを使用したシークレット管理の実装。EXCHANGE_API_KEY、EXCHANGE_SECRET_KEY、DISCORD_WEBHOOK_URLなどの機密情報をSecureStringとして保存。deploy.shスクリプトでSSMからパラメータを取得し.envファイルを生成する機能を実装。GitHub OIDC認証の設定も含む。

3. [ ] SEC-005: GitHub SecretsからAWS OIDCへの移行
      - 📅 Due        : 2026-05-15
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-006
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : GitHub ActionsからAWS OIDCを使用したロールベースの認証を設定。最小権限原則に基づきS3:PutObject、S3:GetObject、ssm:GetParametersのみを許可するIAMポリシーを作成。GitHub SecretsからAPIキーなどの機密情報を削除し、代わりにSSM Parameter Storeから取得するようCI/CDを修正。

4. [ ] INF-024: deploy.ymlをCI→SSM仕様に修正
      - 📅 Due        : 2026-05-20
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-005
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : deploy.ymlワークフローを修正し、直接.envファイルをEC2に配置せず、SSM Parameter Storeから取得するように変更。main pushでEC2起動し、PnL出力が0になることを確認。OIDC認証とSSM Parameter Store取得のエラーハンドリングも実装。

5. [ ] DAT-015: Data-Lifecycle Cron実機テスト
      - 📅 Due        : 2026-05-25
      - 👤 Owner      : @nijor
      - 🏷️  Label      : ops
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : EC2環境でData-Lifecycleスクリプト（npm run data-lifecycle --run-now）を実行し、古いファイルがS3に正しく移行されることを確認。IAMインスタンスプロファイルの検証、S3バケットへのアクセス権限確認、cronジョブの設定と動作確認も実施。



## 🗓 2026-W14スプリント候補（P1→P2：監視システム整備）

### 監視システムの整備方針:

本スプリントはP2フェーズ「監視&ログ可視化」に対応しており、Grafanaダッシュボードに「残高・PnL・Error Rate」の3つの主要メトリクスを実装することを目指します。以下の成果物を予定しています：

1. **メトリクス収集基盤**:
   - Bot側メトリクスエンドポイント実装
   - Prometheus設定の調整
   - Grafanaデータソースの自動プロビジョニング

2. **主要ダッシュボード**:
   - PnL & 残高ダッシュボード
   - （次回スプリントで）Bot健康状態ダッシュボード
   - （次回スプリントで）インフラ資源ダッシュボード

3. **アラート設定**:
   - （次回スプリントで）アラートルールYAMLの作成
   - （次回スプリントで）Alertmanager Discord Route拡張

##### 成功基準:
- メトリクスエンドポイントからPrometheusでデータ収集可能
- Grafanaダッシュボードで残高とPnLの可視化
- docker-compose経由での自動プロビジョニング

次回スプリントではアラート設定と残りのダッシュボードを実装する予定です。P2フェーズ完了後はP3「リスクロジック実戦テスト」へと進みます。









































































































































































