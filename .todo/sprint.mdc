---
description: 
globs: 
alwaysApply: false
---
# SOL-Bot スプリント

### 本番稼働ロードマップと計画:

プロジェクトは現在、「ビルド／CI/CD／Docker」が動作する状態から、「24時間無停止のLIVE取引」へと向かうロードマップを進行中です。これには緊急停止機能、ロールバック機能、監視体制、アラート通知が含まれます。

#### フェーズ別タスクリスト

| フェーズ | 目的 | 完了条件 | 作業粒度 |
|---|---|---|---|
| P0 ― 安全ネット | "やらかさない"仕組みを先に敷く | LIVE 停止スイッチ が 10 秒で押せる | 2 d |
| P1 ― インフラ Hardening | 勝手に動き出せる CI/CD + Secrets | main push → EC2 → LIVE 再起動まで全自動 | 3 d |
| P2 ― 監視 & ログ可視化 | 失敗を 5 分以内に検知 | Grafana に「残高・PnL・Error Rate」3 枚 | 2 d |
| P3 ― リスクロジック実戦テスト | 24 h 無人で Paper-Trade | simulation モードでノーエラー通過 | 3 d |
| P4 ― Runbook & リハーサル | 障害対応ドキュメント & Drill 完了 | "EC2 停止→復旧" をペアで 1 回成功 | 1 d |
| P5 ― Go-Live | 実弾投入 & 監視運用開始 | 週次決算まで問題なし | - |

現在の進捗状況は「P0→P1フェーズ移行中」と評価されており、P0フェーズのタスクが完了次第、P1フェーズに進み、その後のスプリントでP2、P3、P4、P5と進んで行く予定です。

## 🗓 2026-W11スプリント（P0→P1：安全ネット＆インフラHardening）

#### 本スプリント（P0→P1）の"Next-Action"指示:

| # | タスク | How-To / 受け入れ基準 |
|---|------|-------------------|
| 0-1 | 緊急停止フラグを実装 | 仕様：data/kill-switch.flag が存在したら即 process.exit(1) 試験：flag 生成→Bot が 30 sec 以内に停止 |
| 0-2 | ノン root SSH & sudo systemctl stop bot.service で同等の Kill を確認 | EC2 で 1 コマンド停止できること |
| 1-1 | Secrets を AWS SSM Parameter Store に移行 | ステップ ① aws ssm put-parameter --name /solbot/EXCHANGE_API_KEY --type SecureString … ② deploy.sh で aws ssm get-parameter 取得→.env 生成 ③ GitHub Actions に OIDC ロール を設定（最低: ssm:GetParameters） |
| 1-2 | GitHub Secrets から "鍵系" を削除 | EXCHANGE_SECRET_KEY, DISCORD_WEBHOOK_URL など = Parameter Store へ |
| 1-3 | deploy*.yml を CI→SSM 仕様 に修正 | 成功条件： main push で .env を含まずに EC2 起動し PnL 0 出力 |
| 1-4 | IAM 最小権限ポリシー を添付 | S3:PutObject, S3:GetObject, ssm:GetParameters のみ（Glacier は別ロール） |
| 1-5 | Data-Lifecycle Cron 実機テスト | EC2 で npm run data-lifecycle --run-now → S3 にファイル移行確認 |


## テスト残タスク消化スプリント(優先度高)

- [x] TST-050: MeanReversionStrategyテストのESM対応修正
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : meanReversionStrategy.test.mjsの構文エラー（文字列リテラル問題、カンマ区切り問題）の修正タスク。Jestのテスト環境でメモリリーク問題があり、独自のシンプルテストスクリプトを作成して対応。モックを使用してESM環境での実行を成功させた。

- [x] TST-051: テスト環境のビルド出力問題解決
      - 📅 Due        : 2026-05-08
      - 👤 Owner      : @nijor
      - 🏷️  Label      : build
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : tsconfig.esm.jsonの修正とMJSコピースクリプトを実装。index.tsファイルを追加してコンパイル時のモジュール生成を修正。.mjsファイルをdistに正しくコピーし、ESMテストが実行可能に。メモリリーク問題、ESMの構文エラー、パラメータサービスの開発未定義エラーはが残だがこれらはTSTー052に対応

- [x] TST-052: デュアルフォーマット実行の互換性向上
      - 📅 Due        : 2026-05-12
      - 👤 Owner      : @nijor
      - 🏷️  Label      : infra
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : importMetaHelper.tsの改良でESM/CJS互換性を強化。backtestRunner.tsとMultiTimeframeDataFetcher.tsの修正でimport.meta依存問題を解決。parameterService.tsを改良してデフォルトエクスポートを追加。todoValidatorのnullチェックを強化し、テスト失敗を解消。テストフレームワークの互換性問題を解決した。

- [x] TST-053: テスト安定性向上のためのクリーンアップ強化
      - 📅 Due        : 2026-05-15
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ⏳
      - 📊 Progress   : 75%
      - ✎ Notes      : REF-034で実装されたリソーストラッカーの活用を全テストに展開。todoValidator.test.tsとparameterService.test.tsに実装済み。残り他のテストファイル（戦略テスト等）にも適用が必要。

- [ ] TST-054: CI/CDパイプラインのテスト安定性強化
      - 📅 Due        : 2026-05-18
      - 👤 Owner      : @nijor
      - 🏷️  Label      : cicd
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : GitHub ActionsのESMテスト用ワークフローの強化。タイムアウト設定の最適化、テスト失敗時の詳細ログ収集。テスト用のキャッシュ戦略改善。forceExit、detectOpenHandlesなどのオプションの統一。

- [ ] TST-055: モジュールモックの一貫性向上
      - 📅 Due        : 2026-05-22
      - 👤 Owner      : @nijor
      - 🏷️  Label      : test
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : @jest/globals importの標準化。jest.mockパターンの統一。テスト用モッククラスの共通ライブラリ化。モックファクトリー関数の実装と展開。


### 今週のスプリント計画と優先順位:
P0→P1フェーズのスプリント（本番稼働に向けた安全ネットとインフラHardening）。優先順位は以下の通り：

0. [x] CICD-003: todo-lintスクリプトの修正
      - 📅 Due        : 2026-04-30
      - 👤 Owner      : @nijor
      - 🏷️  Label      : bug
      - 🩺 Health     : ✅
      - 📊 Progress   : 100%
      - ✎ Notes      : ESモジュール環境のloggerインポート問題を修正。todoValidator.tsとtodo-lint.tsのlogger依存をconsole.logに変更。コードをコミット済み。

1. [ ] SEC-004: 緊急停止フラグ機能の実装
      - 📅 Due        : 2026-05-05
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : data/kill-switch.flagが存在したら即process.exit(1)する機能を実装。EC2で実行中のボットを30秒以内に停止できることを確認。また非root SSHでのsudo systemctl stop bot.serviceによる停止機能も検証。

2. [ ] SEC-006: Secrets管理をAWS SSM Parameter Storeに移行
      - 📅 Due        : 2026-05-10
      - 👤 Owner      : @nijor
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : AWS SSM Parameter Storeを使用したシークレット管理の実装。EXCHANGE_API_KEY、EXCHANGE_SECRET_KEY、DISCORD_WEBHOOK_URLなどの機密情報をSecureStringとして保存。deploy.shスクリプトでSSMからパラメータを取得し.envファイルを生成する機能を実装。GitHub OIDC認証の設定も含む。

3. [ ] SEC-005: GitHub SecretsからAWS OIDCへの移行
      - 📅 Due        : 2026-05-15
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-006
      - 🏷️  Label      : security
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : GitHub ActionsからAWS OIDCを使用したロールベースの認証を設定。最小権限原則に基づきS3:PutObject、S3:GetObject、ssm:GetParametersのみを許可するIAMポリシーを作成。GitHub SecretsからAPIキーなどの機密情報を削除し、代わりにSSM Parameter Storeから取得するようCI/CDを修正。

4. [ ] INF-024: deploy.ymlをCI→SSM仕様に修正
      - 📅 Due        : 2026-05-20
      - 👤 Owner      : @nijor
      - 🔗 Depends-on : SEC-005
      - 🏷️  Label      : infra
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : deploy.ymlワークフローを修正し、直接.envファイルをEC2に配置せず、SSM Parameter Storeから取得するように変更。main pushでEC2起動し、PnL出力が0になることを確認。OIDC認証とSSM Parameter Store取得のエラーハンドリングも実装。

5. [ ] DAT-015: Data-Lifecycle Cron実機テスト
      - 📅 Due        : 2026-05-25
      - 👤 Owner      : @nijor
      - 🏷️  Label      : ops
      - 🩺 Health     : ⏳
      - 📊 Progress   : 0%
      - ✎ Notes      : EC2環境でData-Lifecycleスクリプト（npm run data-lifecycle --run-now）を実行し、古いファイルがS3に正しく移行されることを確認。IAMインスタンスプロファイルの検証、S3バケットへのアクセス権限確認、cronジョブの設定と動作確認も実施。


## 🗓 2026-W12スプリント候補（P1→P2：監視システム整備）

### 監視システムの整備方針:

本スプリントはP2フェーズ「監視&ログ可視化」に対応しており、Grafanaダッシュボードに「残高・PnL・Error Rate」の3つの主要メトリクスを実装することを目指します。以下の成果物を予定しています：

1. **メトリクス収集基盤**:
   - Bot側メトリクスエンドポイント実装
   - Prometheus設定の調整
   - Grafanaデータソースの自動プロビジョニング

2. **主要ダッシュボード**:
   - PnL & 残高ダッシュボード
   - （次回スプリントで）Bot健康状態ダッシュボード
   - （次回スプリントで）インフラ資源ダッシュボード

3. **アラート設定**:
   - （次回スプリントで）アラートルールYAMLの作成
   - （次回スプリントで）Alertmanager Discord Route拡張

##### 成功基準:
- メトリクスエンドポイントからPrometheusでデータ収集可能
- Grafanaダッシュボードで残高とPnLの可視化
- docker-compose経由での自動プロビジョニング

次回スプリントではアラート設定と残りのダッシュボードを実装する予定です。P2フェーズ完了後はP3「リスクロジック実戦テスト」へと進みます。


























































